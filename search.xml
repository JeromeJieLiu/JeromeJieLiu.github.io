<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js总结]]></title>
    <url>%2F2018%2F08%2F31%2Fjs%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[JavaScript的DOM和BOM第一节 JavaScript的DOMJavaScript主要包括三部分内容:ECMAScript、DOM、BOM 1.1 DOM概述通过 HTML DOM,使用 JavaScript访问 HTML 文档的所有元素。 当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。 HTML DOM 模型被构造为对象的树： 通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。 JavaScript 能够改变页面中的所有 HTML 元素。 JavaScript 能够改变页面中的所有 HTML 属性。 JavaScript 能够改变页面中的所有 CSS 样式。 JavaScript 能够对页面中的所有事件做出反应。 1.2 获取HTML元素通常，通过 JavaScript，您需要操作 HTML 元素。 为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事： 通过 id 找到 HTML 元素 通过标签名找到 HTML 元素 通过类名找到HTML 元素 4.2.1 id找到HTML元素在 DOM 中查找 HTML 元素的最简单的方法，是通过使用元素的 id。 本例查找 id=”intro” 元素： 1var x=document.getElementById("intro"); 如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。 如果未找到该元素，则 x 将包含 null。 1.2.2 标签名找到 HTML 元素本例查找 id=”main” 的元素，然后查找 id=”main” 元素中的所有 元素： 12var x=document.getElementById("main");var y=x.getElementsByTagName("p"); 1.2.3 类名找到HTML 元素本例通过 getElementsByClassName 函数来查找 class=”intro” 的元素： 1var x=document.getElementsByClassName("intro"); 1.3 修改HTMLHTML DOM 允许 JavaScript 改变 HTML 元素的内容。 1.3.1 改变HTML内容修改 HTML 内容的最简单的方法时使用 innerHTML 属性。 如需改变 HTML 元素的内容，请使用这个语法： document.getElementById(id).innerHTML=”abcd“; document.getElementById(id).innerText=”xxxx”; 本例改变了 元素的内容： 本例改变了 元素的内容： 12345678&lt;html&gt;&lt;body&gt;&lt;p id="p1"&gt;Hello World!&lt;/p&gt;&lt;script&gt;document.getElementById("p1").innerHTML="abcd";&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 运行结果： 1.3.2 改变HTML属性如需改变 HTML 元素的属性，请使用这个语法： document.getElementById(id).attribute=新属性值 本例改变了 元素的 src 属性： 123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;img id="image" src="1.gif"&gt;&lt;script&gt;document.getElementById("image").src="2.jpg";&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1.4 修改CSS样式改变HTML的样式： 如需改变 HTML 元素的样式，请使用这个语法： document.getElementById(id).style.property=新样式 下面的例子会改变 元素的样式： 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="p1"&gt;Hello World!&lt;/p&gt;&lt;p id="p2"&gt;Hello World!&lt;/p&gt;&lt;script&gt;document.getElementById("p2").style.color="blue";document.getElementById("p2").style.fontFamily="Arial";document.getElementById("p2").style.fontSize="larger";&lt;/script&gt;&lt;p&gt;以上段落通过脚本修改。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 运行结果为： 1.5 元素操作1.5.1 创建新元素如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。 12345678910111213&lt;div id="div1"&gt;&lt;p id="p1"&gt;这是一个段落。&lt;/p&gt;&lt;p id="p2"&gt;这是另一个段落。&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var para=document.createElement("p");var node=document.createTextNode("这是一个新段落。");para.appendChild(node);var element=document.getElementById("div1");element.appendChild(para);&lt;/script&gt; 例子说明： 这段代码创建新的 元素： var para=document.createElement(“p”); 如需向 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点： var node=document.createTextNode(“这是一个新段落。”); 然后必须向 元素追加这个文本节点： para.appendChild(node); 最后必须向一个已有的元素追加这个新元素。 这段代码找到一个已有的元素： var element=document.getElementById(“div1”); 以下代码在已存在的元素后添加新元素： element.appendChild(para); 1.5.2 删除已有的 HTML 元素以下代码演示了如何删除元素： 123456789&lt;div id="div1"&gt;&lt;p id="p1"&gt;这是一个段落。&lt;/p&gt;&lt;p id="p2"&gt;这是另一个段落。&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var parent=document.getElementById("div1");var child=document.getElementById("p1");parent.removeChild(child);&lt;/script&gt; 例子说明： 这个 HTML 文档含有拥有两个子节点（两个 元素）的 元素： 1234567&lt;div id="div1"&gt;&lt;p id="p1"&gt;这是一个段落。&lt;/p&gt;&lt;p id="p2"&gt;这是另一个段落。&lt;/p&gt;&lt;/div&gt; 找到 id=”div1” 的元素： var parent=document.getElementById(“div1”); 找到 id=”p1” 的 元素： var child=document.getElementById(“p1”); 从父元素中删除子元素： parent.removeChild(child); 如果能够在不引用父元素的情况下删除某个元素，就太好了。不过很遗憾。DOM 需要清楚您需要删除的元素，以及它的父元素。 这是常用的解决方案：找到您希望删除的子元素，然后使用其 parentNode 属性来找到父元素： var child=document.getElementById(“p1”);child.parentNode.removeChild(child); 1.6 DOM事件HTML DOM 允许我们通过触发事件来执行代码。 比如以下事件： 元素被点击。 页面加载完成。 输入框被修改。 在接下来的章节，你会学到更多关于事件的知识。 本例改变了 id=”id1” 的 HTML 元素的样式，当用户点击按钮时： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1 id="id1"&gt;myH1&lt;/h1&gt;&lt;button type="button" onclick="document.getElementById('id1').style.color='red'"&gt;button&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 点击前： 点击后： HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。 HTML 事件的例子： 当用户点击鼠标时 当网页已加载时 当图像已加载时 当鼠标移动到元素上时 当输入字段被改变时 当提交 HTML 表单时 当用户触发按键时 在本例中，当用户在 元素上点击时，会改变其内容： 123456&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1 onclick="this.innerHTML='Ooops!'"&gt;点击文本!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 本例从事件处理器调用一个函数： 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script&gt;function changetext(id)&#123; id.innerHTML="Ooops!";&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 onclick="changetext(this)"&gt;点击文本!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 如需向 HTML 元素分配 事件，您可以使用事件属性。 1&lt;button onclick="displayDate()"&gt;点这里&lt;/button&gt; HTML DOM 允许您使用 JavaScript 来向 HTML 元素分配事件： 123&lt;script&gt;document.getElementById("myBtn").onclick=function()&#123;displayDate()&#125;;&lt;/script&gt; 事件种类介绍 onload 和 onunload 事件会在用户进入或离开页面时被触发。 onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。 onload 和 onunload 事件可用于处理 cookie。 1&lt;body onload="checkCookies()"&gt; onchange 事件常结合对输入字段的验证来使用。 下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。 1&lt;input type="text" id="fname" onchange="upperCase()"&gt; onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;body&gt;&lt;div onmouseover="mOver(this)" onmouseout="mOut(this)" style="background-color:#D94A38;width:120px;height:20px;padding:40px;"&gt;Mouse Over Me&lt;/div&gt;&lt;script&gt;function mOver(obj)&#123; obj.innerHTML="Thank You"&#125;function mOut(obj)&#123; obj.innerHTML="Mouse Over Me"&#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;/head&gt;&lt;head&gt;&lt;script&gt;function lighton()&#123; document.getElementById('myimage').src="bulbon.gif";&#125;function lightoff()&#123; document.getElementById('myimage').src="bulboff.gif";&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;img id="myimage" onmousedown="lighton()" onmouseup="lightoff()" src="bulboff.gif" width="100" height="180" /&gt;&lt;p&gt;点击不释放鼠标灯将一直亮着!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 1.7 EventListeneraddEventListener() 方法 在用户点击按钮时触发监听事件： 1document.getElementById("myBtn").addEventListener("click", displayDate); addEventListener() 方法用于向指定元素添加事件句柄。 addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。 你可以向一个元素添加多个事件句柄。 你可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。 你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。 addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。 当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。 你可以使用 removeEventListener() 方法来移除事件的监听。 语法： 1element.addEventListener(event, function, useCapture); 第一个参数是事件的类型 (如 “click” 或 “mousedown”). 把on去掉 第二个参数是事件触发后调用的函数。 第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。 注意:不要使用 “on” 前缀。 例如，使用 “click” ,而不是使用 “onclick”。 当用户点击元素时弹出 “Hello World!” : 12345element.addEventListener("click", myFunction);function myFunction() &#123; alert ("Hello World!");&#125; addEventListener() 方法允许向同个元素添加多个事件，且不会覆盖已存在的事件： 12element.addEventListener("click", myFunction);element.addEventListener("click", mySecondFunction); 事件冒泡或事件捕获？ 事件传递有两种方式：冒泡与捕获。 事件传递定义了元素事件触发的顺序。 如果你将 元素插入到 元素中，用户点击 元素, 哪个元素的 “click” 事件先被触发呢？ 在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素，即： 元素的点击事件先触发，然后会触发 元素的点击事件。 在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： 元素的点击事件先触发 ，然后再触发 元素的点击事件。 addEventListener() 方法可以指定 “useCapture” 参数来设置传递类型： 1addEventListener(event, function, useCapture); 默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。 1document.getElementById("myDiv").addEventListener("click", myFunction, true); removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄: 1element.removeEventListener("mousemove", myFunction); 第二节 JavaScript的BOM浏览器对象模型 (BOM) 使 JavaScript 有能力与浏览器”对话”。 浏览器对象模型 (BOM):(Browser Object Model)尚无正式标准。 由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。 2.1 window所有浏览器都支持 window 对象。它表示浏览器窗口。 所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。 全局变量是 window 对象的属性。 全局函数是 window 对象的方法。 甚至 HTML DOM 的 document 也是 window 对象的属性之一： 1window.document.getElementById("header"); 与此相同： 1document.getElementById("header"); 2.1.1 window尺寸有三种方法能够确定浏览器窗口的尺寸。 对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari： window.innerHeight - 浏览器窗口的内部高度(不包括滚动条、菜单栏、工具栏) window.innerWidth - 浏览器窗口的内部宽度(不包括滚动条、菜单栏、工具栏) 对于 Internet Explorer 8、7、6、5： document.documentElement.clientHeight document.documentElement.clientWidth 或者 document.body.clientHeight document.body.clientWidth 实用的 JavaScript 方案（涵盖所有浏览器）： 12var w=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;var h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight; 2.1.2 window方法 window.open() - 打开新窗口 window.close() - 关闭当前窗口 window.moveTo() - 移动当前窗口 window.resizeTo() - 调整当前窗口的尺寸 2.1.3 Screen 可用宽度：screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。 返回您的屏幕的可用宽度： 1document.write("可用宽度: " + screen.availWidth); 以上代码输出为： 可用宽度: 1920 可用高度：screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。 返回您的屏幕的可用高度： 1document.write("可用高度: " + screen.availHeight); 以上代码将输出： 可用高度: 1040 2.1.4 Locationwindow.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。 window.location 对象在编写时可不使用 window 这个前缀。 一些例子： 一些实例: location.href 属性返回当前页面的 URL。 location.hostname 返回 web 主机的域名 location.pathname 返回当前页面的路径和文件名 location.port 返回 web 主机的端口 （80 或 443） location.protocol 返回所使用的 web 协议（http:// 或 https://） location.href 属性返回当前页面的 URL。 代码： 1document.write(location.href); 以上代码输出为： http://www.xxx.com/js/my.html location.pathname 属性返回 URL 的路径名。 代码： 1document.write(location.pathname); 以上代码输出为： /js/my.html location.assign() 方法加载新的文档。 加载一个新的文档： 123456789101112131415&lt;html&gt;&lt;head&gt;&lt;script&gt;function newDoc() &#123; window.location.assign("http://www.baidu.com/") &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type="button" value="Load new document" onclick="newDoc()"&gt;&lt;/body&gt;&lt;/html&gt; 2.1.5 Historywindow.history 对象包含浏览器的历史。 window.history 对象在编写时可不使用 window 这个前缀。 为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。 一些方法： history.back() - 与在浏览器点击后退按钮相同 123456789101112131415&lt;html&gt;&lt;head&gt;&lt;script&gt;function goBack() &#123; window.history.back() &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type="button" value="Back" onclick="goBack()"&gt;&lt;/body&gt;&lt;/html&gt; history.forward() - 与在浏览器中点击按钮向前相同 123456789101112131415&lt;html&gt;&lt;head&gt;&lt;script&gt;function goForward() &#123; window.history.forward() &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type="button" value="Forward" onclick="goForward()"&gt;&lt;/body&gt;&lt;/html&gt; 2.1.6 Navigatorwindow.navigator 对象在编写时可不使用 window 这个前缀。 1234567891011&lt;div id="example"&gt;&lt;/div&gt;&lt;script&gt;txt = "&lt;p&gt;浏览器代号: " + navigator.appCodeName + "&lt;/p&gt;";txt+= "&lt;p&gt;浏览器名称: " + navigator.appName + "&lt;/p&gt;";txt+= "&lt;p&gt;浏览器版本: " + navigator.appVersion + "&lt;/p&gt;";txt+= "&lt;p&gt;启用Cookies: " + navigator.cookieEnabled + "&lt;/p&gt;";txt+= "&lt;p&gt;硬件平台: " + navigator.platform + "&lt;/p&gt;";txt+= "&lt;p&gt;用户代理: " + navigator.userAgent + "&lt;/p&gt;";txt+= "&lt;p&gt;用户代理语言: " + navigator.systemLanguage + "&lt;/p&gt;";document.getElementById("example").innerHTML=txt;&lt;/script&gt; 第三节 JavaScript计时3.1 Date对象12345678910111213141516var d=new Date();document.write(d);document.write("&lt;br/&gt;")document.write("年份："+(d.getYear()+1900));document.write("&lt;br/&gt;")document.write("年份："+d.getFullYear());document.write("&lt;br/&gt;");document.write("月份:"+(d.getMonth()+1))document.write("&lt;br/&gt;");document.write("日期:"+d.getDate());document.write("&lt;br/&gt;");document.write("小时:"+d.getHours());document.write("&lt;br/&gt;");document.write("分钟:"+d.getMinutes());document.write("&lt;br/&gt;");document.write("秒:"+d.getSeconds()); 3.2 JavaScript计时事件setInterval() 间隔指定的毫秒数不停地执行指定的代码： 每三秒弹出 “hello” ： 1setInterval(function()&#123;alert("Hello")&#125;,3000); 实例展示了如何使用 setInterval() 方法，但是每三秒弹出一次对用户体验并不好。 以下实例将显示当前时间。 setInterval() 方法设置每秒钟执行一次代码，就是手表一样。 12345678var myVar=setInterval(function()&#123;myTimer()&#125;,1000);function myTimer()&#123;var d=new Date();var t=d.toLocaleTimeString();document.getElementById("demo").innerHTML=t;&#125; clearInterval() 方法用于停止 setInterval() 方法执行的函数代码。 代码： 12345678910111213141516&lt;p id="demo"&gt;&lt;/p&gt;&lt;button onclick="myStopFunction()"&gt;Stop time&lt;/button&gt;&lt;script&gt;var myVar=setInterval(function()&#123;myTimer()&#125;,1000);function myTimer()&#123;var d=new Date();var t=d.toLocaleTimeString();document.getElementById("demo").innerHTML=t;&#125;function myStopFunction()&#123;clearInterval(myVar);&#125;&lt;/script&gt; setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 t 的变量中。假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。 window.setTimeout(“javascript 函数“,毫秒数); 第一个参数是含有 JavaScript 语句的字符串。这个语句可能诸如 “alert(‘5 seconds!’)”，或者对函数的调用，诸如 alertMsg()”。 第二个参数指示从当前起多少毫秒后执行第一个参数。 提示：1000 毫秒等于一秒。 等待3秒，然后弹出 “Hello”: 1setTimeout(function()&#123;alert("Hello")&#125;,3000); clearTimeout() 方法用于停止执行setTimeout()方法的函数代码。 1234567891011var myVar;function myFunction()&#123;myVar=setTimeout(function()&#123;alert("Hello")&#125;,3000);&#125;function myStopFunction()&#123;clearTimeout(myVar);&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心之所向，素履以往]]></title>
    <url>%2F2018%2F08%2F30%2FThorn%2F</url>
    <content type="text"><![CDATA[人这一生，最幸运的事情便是努力就能得到回报，若是遇到一二，定要尽力抓住。 1.与其驻足，叹咫尺即天涯，不如上路，笑看天涯亦咫尺。 2.生活多么无趣，但一则则无趣的生活编织在一起，才构成了生命的繁华。 3.有很多人，你原以为可以忘记。其实没有。他们一直在你心底的一个角落。直到你的生命尽头。在尽头你会怀念每一个角落里的黑暗之中的光，因为他们组成你的记忆与感情。但是你已经不能拥抱他们。只能在最后明白，路途是一个念念不忘的失去的过程。 4.我们在电影里看着别人替我们过着梦里的人生，看着他们替我们爱，替我们死，动容之时流下眼泪——擦干之后，那不过是灰飞烟灭的幻象，生活仍然一无所有。 5.我自倾杯，君且随意 ：最深情的话莫过于此了。 6.但愿你的旅途漫长，但愿你拥抱的人正泪流不止。但愿你付出的爱，有着某种恰到好处的形状，恰能完好地镶嵌在她的灵魂空缺处，毫厘不差。但愿你心底关怀，杯满四溢，又正在被另一个孤独的灵魂渴望着。 7.但愿你记得，在你痛哭失声的时刻，曾有人以肩窝盛满你的泪。 8.路是时光的血脉，通向生命不可知的隘口。 9.我想去相信一个人，非常想。可是每个人在这个世界上忙着生，忙着死，所有人都是如此窘迫的姿态。令我不忍心再向别人索求关怀。如果我们想不对人或事失望，惟一的方法就是不要对它给予任何希望。这不是绝望，这是生存下去的惟一途径，亦是获取幸福感的前提。 10.我想，沉默是成长的标志，而成熟的标志，就是如何去沉默。我不能说我们生如夏花，活得完美而睿智，死如秋叶亦离我们非常遥远，当下最真实的，不过是一种宽宏和原谅，对自身、他人，以及这个失望和希望并存的世界。 11.在这个吵得人分不清东南西北得世界里，我们手里所持有的干干净净的初衷，不多了。握好了，别丢了。明天还要赶很远的路。 12.隐忍平凡的外壳下，要像果实般有着汁甜水蜜的肉瓤，以及一颗坚硬闪亮的内核。 13.心之所向，素履以往。生如逆旅， 一苇以航。 14.做学生的时候，身是不自由的，但心却很自由，有多远梦多远。而今，身是自由的，但心已经无法自由。有多少梦，就有多远。 15.一段感情若势如破竹，最后也往往兵败如山倒。但也曾算是，像把每一天当成是最后一天来珍惜生命那般，把眼前人当成是最后一个人来珍惜感情。奈何世事无常，人无常，爱无常。花辞树，以叶为美。叶落尽，以枝为姿。枝若朽，以根为雕。感情若如四季，我愿如良木。]]></content>
      <categories>
        <category>美文</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
</search>

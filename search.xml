<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[二十三种设计模式（一）单例模式]]></title>
    <url>%2F2018%2F09%2F03%2F%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式可以说是23中设计模式中最容易的实现和理解的设计模式了，不过单例模式写很容易，但是写好就不容易了，因为单例模式中也隐藏了很多的问题，趁着这次机会，结合网上的一些博客，对单例模式做了一个总结 。这篇文章对单例模式的大部分问题，都进行了总结描述，并提供了解决方法。 接下来还会对其他设计模式进行总结，不过我对一些问题，总喜欢尽可能的全面了解，所以每一种设计模式，我都会参考阅读很多文献，尽可能的包括大部分内容，所以更新速度可能较慢。 对于一些问题，有兴趣深入了解的朋友，我也在文章后面附上了我参考的一些链接，希望我们可以共同进步。 单例模式概念单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。 单例模式的特点 单例模式只能有一个实例 单例模式必须自己创建自己的唯一实例 单例模式必须保证给所有其他对象提供这一实例 单例模式的应用场景需求：在前端创建工具箱窗口，工具箱要么不出现，出现也只出现一个 遇到问题：每次点击菜单都会重复创建“工具箱”窗口。 解决方案一：使用if语句，在每次创建对象的时候首先进行判断是否为null，如果为null再创建对象。 需求：如果在5个地方需要实例出工具箱窗体 遇到问题：这个小bug需要改动5个地方，并且代码重复，代码利用率低 解决方案二：利用单例模式，保证一个类只有一个实例，并提供一个访问它的全局访问点。 单例模式的实现思路单例模式要求类返回对象的一个引用(唯一引用)和一个获得该实例的方法(必须是静态方法) 单例模式的实现需要两步 先将类的构造方法定义为私有方法,保证在外部无法通过new关键字调用构造方法创建实例对象 ,只能通过类的静态方法获取实例对象。 在该类的内部定义一个静态方法,当我们调用这个方法时,先判断该类持有的引用是否为空， 为空则创建该类的实例，将其的引用赋给该静态方法持有的引用,然后返回。 单例模式的写法饿汗式123456789public class Singleton&#123; private final static Singleton instence = new Singleton(); private Singleton()&#123;&#125; public static Singleton getInstence()&#123; return instence; &#125;&#125; 优点： 这种写法比较简单。 在类装载的时候就实现了实例化，获取对象速度比较快。 避免了线程安全问题， 缺点： 这样写效率很低。 在类装载的时候就完成实例化，没有达到懒加载（Lazy Loading）的效果。 如果从来没有使用过这个实例，会造成内存浪费。 懒汉式123456789101112public class Singleton&#123; private static Singleton instence; private Singleton()&#123;&#125; public static Singleton getInstence()&#123; if(instence == null)&#123; instence = new Singleton(); &#125; return instence; &#125;&#125; 优点： 这样写相对上一种写法效率有了一些提高。 这种写法起到了懒加载（Lazy Loading）的效果。 使用的时候再进行实例化，一定程度避免内存浪费。 缺点：这种写法是线程不安全的，在多线程环境下会出现安全问题。 如果在多线程环境下,一个线程通过了if(instence==null)判断， 还没有创建实例，但是另一个线程也通过判断进来了，这样就会 产生多个实例。 ####懒汉式变形一（同步代码块 线程安全） 1234567891011121314public class Singleton&#123; private static Singleton instence; private Singleton()&#123;&#125; public static Singleton getInstence()&#123; synchronized(Singleton.class)&#123; if(instence == null)&#123; instence = new Singleton(); &#125; &#125; return instence; &#125;&#125; 优点：这种写法加上了同步代码块，保证了线程安全，避免了上面的写法在多线程情况下出现的问题。 缺点：这样写会造成每次调用静态方法获取实例对象,都需要进入同步代码块，造成效率低下，因为同步会造成效率的浪费， 我们要清楚同步是以牺牲效率来换取安全的。 ####懒汉式变形二（双重检查 优化） 12345678910111213141516public class Singleton&#123; private static Singleton instence; private Singleton()&#123;&#125; public static Singleton getInstence()&#123; if(instence == null)&#123; synchronized(Singleton.class)&#123; if(instence == null)&#123; instence = new Singleton(); &#125; &#125; &#125; return instence; &#125;&#125; 这种写法是对变形一的优化，在外层又加了一层检查，即在同步代码块执行之前先判断实例对象是否存在。 优点：我们不用再每次调用静态方法获取对象的时候都进行同步，只用进入同步代码块一次就好了。 大大提高了效率。 缺点：这样写，会在一定情况下造成线程不安全，由于JVM编译器存在指令重排序，即JVM虚拟机为了提高效率会在其内部对指令的执行顺序在遵循happens-before原则的基础进行调整优化。 happens-before原则JMM具备一些先天的有序性,即不需要通过任何手段就可以保证的有序性，通常称为happens-before原则。&lt;&lt;JSR-133：happens-before规则： 程序顺序规则： 一个线程中的每个操作，happens-before于该线程中的任意后续操作 监视器锁规则：对一个线程的解锁，happens-before于随后对这个线程的加锁 volatile变量规则： 对一个volatile域的写，happens-before于后续对这个volatile域的读 传递性：如果A happens-before B ,且 B happens-before C, 那么 A happens-before C start()规则： 如果线程A执行操作ThreadB_start()(启动线程B) , 那么A线程的ThreadB_start()happens-before 于B中的任意操作 join()原则： 如果A执行ThreadB.join()并且成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。 interrupt()原则： 对线程interrupt()方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测是否有中断发生 finalize()原则：一个对象的初始化完成先行发生于它的finalize()方法的开始 我们创建实例对象的语句中包含三个指令： memory =allocate(); //1：分配对象的内存空间 ctorInstance(memory); //2：初始化对象 instance =memory; //3：设置instance指向刚分配的内存地址 但是这样的指令顺序并非一成不变的，经过JVM和CPU的优化，其顺序可能会变成： memory =allocate(); //1：分配对象的内存空间 instance =memory; //3：设置instance指向刚分配的内存地址 ctorInstance(memory); //2：初始化对象 当一个线程执行完1,3,时，instance对象还未完成初始化，但已经不再指向null。此时如果另一个线程抢占到CPU资源，执行 if（instance == null）的结果会是false，从而返回一个没有初始化完成的instance对象。 懒汉式变形三（volatile 优化）12345678910111213141516public class Singleton&#123; private volatile static Singleton instence; private Singleton()&#123;&#125; public static Singleton getInstence()&#123; if(instence == null)&#123; synchronized(Singleton.class)&#123; if(instence == null)&#123; instence = new Singleton(); &#125; &#125; &#125; return instence; &#125;&#125; volatile关键字有两个功能 a、保证了不同线程对该变量操作的内存可见性; b、 禁止指令重排序 这样就可以保证在多线程情况下变量访问前后因为指令重排序造成的bug 这样的话，instance对象的引用要么指向null，要么指向一个初始化完毕的Instance，而不会出现某个中间态，保证了安全。 ####静态内部类实现单例 123456789public class Singleton &#123; private static class LazyHolder &#123; private static final Singleton INSTANCE = new Singleton(); &#125; private Singleton ()&#123;&#125; public static Singleton getInstance() &#123; return LazyHolder.INSTANCE; &#125;&#125; 注意： 从外部无法访问静态内部类LazyHolder，只有当调用Singleton.getInstance方法的时候，才能得到单例对象INSTANCE。 INSTANCE对象初始化的时机并不是在单例类Singleton被加载的时候，而是在调用getInstance方法，使静态内部类LazyHolder被加载。因此这种实现方式是利用classloader的加载机制来实现懒加载，并保证构建单例的线程安全。 枚举实现单例模式123public enum SingletonEnum &#123; INSTANCE;&#125; 使用枚举实现的单例模式，不但可以防止利用反射强行构建单例对象，而且可以在枚举类对象被反序列化的时候，保证反序列的返回结果是同一对象。 但是也存在着缺点，它没有实现懒加载，其单例对象是在枚举类被加载的时候进行初始化的。 不过由于枚举是在jdk1.5以后才诞生的，所以我们在实际开发中很少看到。 最后，至于懒加载（lazy-loading），考虑到一般情况不存在调用单例类又不需要实例化单例的情况，所以即便不能做到很好的懒加载（lazy-loading），也并不是大问题。换言之，除了枚举这种方案，饿汉模式也在单例设计中广泛的被应用。 所以单元素的枚举类型已经逐渐成为实现Singleton的最佳方法。 不过具体如何使用，还是要结合实际开发中的具体情况来进行使用。 单例模式的问题####反射问题 j单例模式大都存在一个的问题，就是无法防止使用反射重复创建对象 利用反射打破单例步骤 123456789//获得构造器Constructor con = Singleton.class.getDeclaredConstructor();//设置为可访问con.setAccessible(true);//构造两个不同的对象Singleton singleton1 = (Singleton)con.newInstance();Singleton singleton2 = (Singleton)con.newInstance();//验证是否是不同对象System.out.println(singleton1.equals(singleton2)); 代码可以简单归纳为三个步骤： 第一步，获得单例类的构造器。 第二步，把构造器设置为可访问。 第三步，使用newInstance方法构造对象。 最后为了确认这两个对象是否真的是不同的对象，我们使用equals方法进行比较。毫无疑问，比较结果是false。 但是上面写法中的枚举实现就可以解决这个问题，如果使用枚举实现单例，在利用反射创建对象 123456789101112131415//获得构造器Constructor con = SingletonEnum.class.getDeclaredConstructor();//设置为可访问con.setAccessible(true);//构造两个不同的对象SingletonEnum singleton1 = (SingletonEnum)con.newInstance();SingletonEnum singleton2 = (SingletonEnum)con.newInstance();//验证是否是不同对象System.out.println(singleton1.equals(singleton2)); 执行获得构造器这一步的时候，抛出了如下异常：Exception in thread "main" java.lang.NoSuchMethodException: com.lj.Singleton.&lt;init&gt;() at java.lang.Class.getConstructor0(Class.java:3082) at java.lang.Class.getDeclaredConstructor(Class.java:2178) at com.lj.Text01.main(Text01.java:7) JVM会阻止反射获取枚举的私有构造方法，所有使用枚举可以解决反射重复创建单例对象的问题。 序列化问题下面我们先简要地回顾下对象的序列化。一般来说，一个类实现了 Serializable接口，我们就可以把它往内存里写再从内存里读出而&quot;组装&quot;成一个跟原来一模一样的对象。不过当序列化遇到单例时，里边就有了个问题：从内存读出而组装的对象破坏了单例的规则。单例是要求一个JVM中只有一个类对象的，而现在通过反序列，一个新的对象克隆了出来。 这样就会出现两个实例对象，破坏了单例模式的规则。 我们该怎么解决那 第一种方法：通过枚举实现单例模式，因为枚举的具有自由序列化的特性，所以枚举类对象被反序列化的时候，保证反序列的返回结果是同一对象。 第二种方法：在类中加入readUnshared()方法 1234567891011121314151617181920public class Singleton implements Serializable&#123; private volatile static Singleton instence; private Singleton()&#123;&#125; public static Singleton getInstence()&#123; if(instence == null)&#123; synchronized(Singleton.class)&#123; if(instence == null)&#123; instence = new Singleton(); &#125; &#125; &#125; return instence; &#125; private Object readResolve() throws ObjectStreamException &#123; return instence; &#125; &#125; 这样，当JVM从内存中反序列化地”组装”一个新对象时，就会自动调用这个 readResolve方法来返回我们指定好的对象了，单例规则也就得到了保证。 readResolve方法的调用流程：ObjectInputStream类的readOrdinaryObject方法，在调用完readSerialData（）方法后，就调用了 ObjectStreamClass类的Object invokeReadResolve(Object obj)方法，通过反射调用了我们自己写的readResolve方法。 简单来说这就是浅拷贝和深拷贝的区别 从字面上理解的话就是：浅拷贝—拷贝的级别浅。 深拷贝—拷贝级别更深。 具体的就是： 浅拷贝—能复制变量，如果复制对象的话，当前对象内存在这个对象，则只能复制这个对象的地址。 深拷贝—能复制变量，也能复制当前对象的内部对象。 没有readResolve方法时，对象流序列化，便是进行深拷贝，克隆出来一个新实例对象， 存在readResolve方法时，对象流序列化，便是进行浅拷贝，因为此方法提供了一个对象，那么只能复制 这个实例对象的地址，指向的还是唯一的实例对象。这样便保证了单例规则。 上面全文是我对单例模式的一些整理，参考了网上的一些博客，大概有这些]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql操作命令总结]]></title>
    <url>%2F2018%2F09%2F01%2Fmysql%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[以下是对mysql基本操作命令进行的总结，只是针对单表进行的一些操作，不包括多表操作。 mysql服务命令启动mysql服务：net start mysql 关闭mysql服务：ner stop mysql 注意：管理员身份才能开关 mysql连接命令mysql连接：mysql -uroot -p; 输入密码：password:xxxxx mysql断开连接：quit或exit (Linxu中也可以ctrl+D) mysql基本数据类型常用数据类型： int：整型（4个字节） double：浮点型（8个字节），近似值 例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99 decimal：精确数值数据，最大位数可以是65 例如decimal(5,2)能够存储具有五位数和两位小数的任何值，因此可以存储范围为-999.99至999.99。 char：固定长度字符串类型； char(10) ‘aaa ‘ 固定10个字符，不足补空格， 长度0-255 缺点：浪费空间，优点:查询速度快 varchar：可变长度字符串类型； varchar(10) ‘aaa’ 最多存储10个字符 缺点：查询速度慢，优点：节省空间 text：大文本字符串类型；有字符编码，存储比较大的文本数据。 blob：Binary Large Object二进制大对象数据；可以存储图片、音频、视频 date：日期类型，格式为：yyyy-MM-dd； time：时间类型，格式为：hh:mm:ss timestamp：时间戳类型 yyyy-MM-dd hh:mm:ss 会自动赋值 datetime:日期时间类型 yyyy-MM-dd hh:mm:ss 数据类型 指定值和范围 char String(0~255) varchar String(0~255) tinytext String(0~255) text String(0~65536) blob String(0~65536) mediumtext String(0~16777215) mediumblob String(0~16777215) longblob String(0~4294967295) int Integer(-214847668~214847667) bigint Integer(-9223372036854775808~9223372036854775807) float decimal(精确到23位小数) double decimal(24~54位小数) decimal 将double转储为字符串形式 date YYYY-MM-DD datetime YYYY-MM-DD HH:MM:SS timestamp YYYYMMDDHHMMSS time HH:MM:SS enum 选项值之一 set 选项值子集 mysql常用约束 ​主键约束：primary key (保证数据唯一性),不能重复，不能为null 唯一约束：unique [key],不能重复，可以为null 非空约束：not null 默认约束：default 外键约束：foreign key 自动增长：auto_increment mysql数据库操作命令查询数据库121.show databases; 显示当前mysql中的数据库2.show create databaes 数据库名; 查看数据库定义信息 系统默认数据库 information_schema: 12information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。 mysql: 12mysql：这个是mysql的核心数据库,主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息，不可以删除。 performance_schema: 1性能优化的数据库 test: 1这个是安装时候创建的一个测试数据库，和它的名字一样，是一个完全的空数据库，没有任何表，可以删除。 创建数据库12341.create database 自定义数据库名;（数据库已存在会报错）2.create database if not exists 数据库名 character set gbk;（先判断数据库存不存在，不存在在创建，并设置数据库编码）if not exists 不存在则执行后面语句 修改数据库12修改数据库编码为utf8alter database 数据库名 character set utf8; 删除数据库123drop database 数据库名;（数据库不存在会报错）drop database if exists 数据库名;（先判断数据库存在与否，存在在删除）if exists 判断数据库是否存在（存在则执行后面语句） 其他操作121.use 数据库名; 切换数据库2.select databaes(); 查看当前选择的数据库,没有选择数据库，为null; mysql数据表操作命令查询数据表12show tables;显示当前选择数据库的表show create table 表名;查看表创建细节 创建数据表123456789101112131415161718语法： CREATE TABLE [IF NOT EXISTS] 表名( 字段1 字段类型(长度) 约束, 字段2 字段类型(长度) 约束, ... 字段n 字段类型(长度) 约束 ) [charset=utf8];例子：CREATE TABLE IF NOT EXISTS student( id INT NOT NULL, name VARCHAR(50), age INT, address VARCHAR(100)) CHARSET=utf8; 注意：数据库名、表名、字段名可以使用反勾号` 括住，也可以不括。如果SQL关键字一般要括住。 修改数据表12345678910111.给当前表增加一列（添加一个字段）alter table 表名 add 列名 类型(长度) 约束;2.修改当前表字段类型长度alter table 表名 modify 字段名 新的字段类型(新的长度);3.删除当前表的一列alter table 表名 drop 列名;4.修改表的字符集为gbkalter table 表名 character set gbk;5.修改列名alter table 表名 change 列名 新的列名 字段类型（长度）;注意:列名即字段名 删除数据表12drop table 表名drop if exists 表名; 先判断在删除 其他操作123desc 表名; 查看表结构或字段信息rename table 表名 to 新表名; 修改表名show create table 表名; 查看表的创建细节 mysql数据操作命令查询数据​查询语句书写顺序：select 列 from 表 【where- group by- having- order by-limit】 ​查询语句执行顺序：from 表 where -group by -having - select - order by-limit 简单查询12select * from 表名; 查询所有列，*表示所有列select 列名1,列名2,... from 表名; 查询指定列 条件查询条件查询就是在查询时给出WHERE子句，在WHERE子句中可以使用如下运算符及关键字： 比较运算符 12341.=、!=、&lt;&gt;、&lt;、&lt;=、&gt;、&gt;=；2.BETWEEN…AND；3.IN(set)；4.IS NULL； 关系运算符 1231.AND 2.OR3.NOT 注意：AND运算符优先级高于OR,如果需要先执行OR需要添加括号（）改变。 算数运算符 1+ - * / % 例子 12345678910111213141516171819202122232425262728#查询学生表性别为女，而且年龄大于50的人SELECT * FROM stu WHERE gender='female' AND age&gt;50;#查询查询学号为S_1001，或者姓名为liSi的记录SELECT * FROM stu WHERE sid='S_1001' OR sname='liSi';#查询学号为S1001，S1002，S_1003的记录SELECT * FROM stu WHERE sid IN ('S_1001','S_1002','S_1003');#查询学号不是S1001，S1002，S_1003的记录SELECT * FROM stu WHERE sid NOT IN ('S_1001','S_1002','S_1003');SELECT * FROM stu WHERE NOT sid IN ('S_1001','S_1002','S_1003');#查询年龄为null的记录SELECT * FROM stu WHERE age IS NULL;#查询年龄在20到40之间的学生记录SELECT * FROM stu WHERE age BETWEEN 20 AND 40;SELECT * FROM stu WHERE age&gt;20 AND age&lt;40;#查询性别非男的学生记录SELECT * FROM stu WHERE gender!='male';SELECT * FROM stu WHERE NOT gender='male';SELECT * FROM stu WHERE gender&lt;&gt;'male';#查询姓名不为null的学生记录SELECT * FROM stu WHERE NOT sname IS NULL;SELECT * FROM stu WHERE sname IS NOT NULL; 模糊查询模糊查询需要使用关键字like和通配符： _任意一个 %任意0到n个字符 例子 1234567891011121314#查询姓名由3个字符构成的学生记录SELECT * FROM stu WHERE sname LIKE '___';#查询姓名由5个字符构成，并且第5个字符为“i”的学生记录SELECT * FROM stu WHERE sname LIKE '____i';#查询姓名以“z”开头的学生记录SELECT * FROM stu WHERE sname LIKE 'z%';#查询姓名中第2个字符为“i”的学生记录SELECT * FROM stu WHERE sname LIKE '_i%';#查询姓名中包含“a”字符的学生记录SELECT * FROM stu WHERE sname LIKE '%a%'; 字段控制查询 去除重复记录 12使用distinct关键字select distinct 列名1,列名2,... from 表名; 合并数据 1234567(1)数值类型数据直接进行加法运算select *,数值列名+数值列名 from 表名;(2)字符串类型合并不能直接进行加运算，需要使用concat(列名,'____',列名);select *,CONCAT(列名,'-',列名) from 表名;(3)有的列记录包含很多NULL值，因为任何东西与NULL相加结果还是NULL，所以结算结果可能会出现NULL。可以使用IFNULL函数将NULL值转换为0select *,列名+IFNULL(列名,0) from 表名; 给列名添加别名 12使用AS关键字select *,CONCAT(列名,'-',表名) as 别名 from 表名; 注意：AS关键字可以省略 排序12使用ORDER BY关键字，desc表示降序，asc表示升序（默认升序）select * from 表名 Order by 列名1 DESC,列名2 ASC; 先按列名1数据进行降序排序，相同在按列名2数据升序排序 聚合函数聚合函数是用来做纵向运算的函数： COUNT()：统计指定列不为NULL的记录行数； MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算； MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算； SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0； AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0； 分组查询分组查询时需要使用GROUP BY 子句 HAVING子句可以对分组后的数据进行过滤 注：凡是和聚合函数同时出现的列名，则一定要写在group by 之后 12345678#查询每个部门的部门编号和每个部门的工资和：SELECT deptno,SUM(sal) FROM emp GROUP BY deptno;#查询每个部门的部门编号以及每个部门工资大于1500的人数SELECT deptno,COUNT(*) FROM emp WHERE sal&gt;1500 GROUP BY deptno;#查询工资总和大于9000的部门编号以及工资和：SELECT deptno,COUNT(*) FROM emp GROUP BY deptno HAVING SUM(sal)&gt;1500; 注：having与where的区别: having是在分组后对数据进行过滤,where是在分组前对数据进行过滤 having后面可以使用分组函数(统计函数) where后面不可以使用分组函数。 where是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而 having是对分组后数据的约束。 LIMIT限制（分页查询）LIMIT用来限定查询结果的起始行，以及总行数。 1234#查询前5行数据SELECT * FROM emp LIMIT 0,5;#查询5到10行数据SELECT * FROM emp LIMIT 5,5; 注意，起始行从0开始，即第一行开始！ 分页查询： 如果一页记录为10条，希望查看第3页记录应该怎么查呢？ l 第一页记录起始行为0，一共查询10行; l 第二页记录起始行为10，一共查询10行; l 第三页记录起始行为20，一共查询10行; 增加数据1insert into 表名 (列名1,列名2,...) values(列值1,列值2,,...); 注意: 列名与列值的类型、个数、顺序要一一对应。 可以把列名当做java中的形参，把列值当做实参。 参数不要超出列定义的长度。 如果插入空值，请使用null 插入的日期和字符一样，都使用单引号括起来。 修改数据12update 表名 set 列名1=列值1,列名2=列值2,...where 列名=列值;where后面是修改条件（可选操作）; 删除数据1231.delete from 表名; 删除表中所有数据2.delete from 表名 where 列名=列值; 删除满足where后面条件的数据3.truncate table emp;使用truncate删除表中记录。(先把表删除，然后再创建空表) DELETE 删除表中的数据，表结构还在;删除后的数据使用日志可以找回。 TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。 TRUNCATE 删除的数据不能找回。执行速度比DELETE快。]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis简介]]></title>
    <url>%2F2018%2F08%2F31%2FMybatis%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[​ MyBatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架，MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。 ​ MyBatis可以对配置和原生Map使用简单的XML或注解，将接口和Java的POJOs(Plain Old Java Objects,普通的Java对象)映射成数据库中的记录。 框架概念百度百科：框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。对于程序员来说，框架是一套资源，一套解决某一类问题所使用的资源。这套资源中包含：Jar包、文档、源码、示例等内容，或其中部分内容。 ##MyBatis框架介绍 MyBatis框架的前身是Apache的一个项目，名称为iBaits。2010年，该项目迁移到了Google，更名为MyBatis。2013年，项目又交由GitHub托管。 我们要下载这个框架从GitHub官网下载 https://github.com/mybatis/mybatis-3/releases mybatis-3.4.2.jar MyBatis的核心Jar包lib MyBatis核心Jar包所依赖的Jar包mybatis-3.4.2.pdf MyBatis官方帮助文档 MyBatis框架的作用 MyBatis在三层架构中处于Dao层，用于访问数据库。其作用类似于JDBC。 MyBatis系统架构图 Mybatis框架运行原理API：Application Programming Interface，应用程序接口 ORM：Object Ralationship Mapping，对象关系映射 MyBatis是一种ORM框架，是半自动ORM。MyBatis底层封装了JDBC， Hibernate也是一种ORM框架，是全自动ORM。 第一个Mybatis程序功能：将一个学生信息写入DB 导入Jar包Mybatis的jar包（mybatis核心jai包和mybatis所依赖的jar包lib文件夹下的） mysql驱动的jar包 定义一个Stduent类id，name，age，score * 主键id要定义为包装类型，不要定义为基本数据类型，例如，不要定义为int，而要定义为Integer * 若显式地给出了带参构造器，则要显式地给出无参构造器。 -- 若当前实体类有可能作父类，那么要创建子类对象时，JVM会调用其父类的无参构造器 -- 若使用了Spring框架，那么要求由Spring容器所管理的类，必须要有无参构造器 创建DB表12表名：student字段：id,name,age,score 定义Dao接口IStudentDao123public interface IStudentDao &#123; void insertStudent(Student student);&#125; 定义映射文件12345678910111213* 是一个XML文件，文件名随意，我们这里叫mapper.xml。* 该文件定义到Dao接口所在包。* 约束文件为mybatis-3.4.2.jar ! /org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper&gt; &lt;insert id=&quot;insertStu&quot; parameterType=&quot;com.abc.beans.Student&quot;&gt; insert into student(name,age,score) values(#&#123;name&#125;, #&#123;age&#125;, #&#123;score&#125;) &lt;/insert&gt;&lt;/mapper&gt; 定义主配置文件12345678910111213* 是一个XML文件，文件名随意，我们这里叫mybatis.xml* 定义在src根下* 约束文件为mybatis-3.4.2.jar ! /org/apache/ibatis/builder/xml/mybatis-3-config.dtd标签介绍&lt;transactionManager type=&quot;JDBC&quot; /&gt; 该标签用于指定事务管理器。type的取值有两个： JDBC：使用JDBC事务管理器 MANAGED：使用第三方事务管理器，例如使用Spring的事务管理器&lt;dataSource type=&quot;POOLED&quot;&gt; 该标签用于指定数据源类型。type的取值有三个： POOLED：使用连接池技术（默认使用的是Mybatis内置连接池） UNPOOLED：不使用连接池技术 JNDI：Java Naming-Directory Interface，Java命名与目录接口，这是一个容器。]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybits</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心之所向，素履以往]]></title>
    <url>%2F2018%2F08%2F30%2FThorn%2F</url>
    <content type="text"><![CDATA[人这一生，最幸运的事情便是努力就能得到回报，若是遇到一二，定要尽力抓住。 1.与其驻足，叹咫尺即天涯，不如上路，笑看天涯亦咫尺。 2.生活多么无趣，但一则则无趣的生活编织在一起，才构成了生命的繁华。 3.有很多人，你原以为可以忘记。其实没有。他们一直在你心底的一个角落。直到你的生命尽头。在尽头你会怀念每一个角落里的黑暗之中的光，因为他们组成你的记忆与感情。但是你已经不能拥抱他们。只能在最后明白，路途是一个念念不忘的失去的过程。 4.我们在电影里看着别人替我们过着梦里的人生，看着他们替我们爱，替我们死，动容之时流下眼泪——擦干之后，那不过是灰飞烟灭的幻象，生活仍然一无所有。 5.我自倾杯，君且随意 ：最深情的话莫过于此了。 6.但愿你的旅途漫长，但愿你拥抱的人正泪流不止。但愿你付出的爱，有着某种恰到好处的形状，恰能完好地镶嵌在她的灵魂空缺处，毫厘不差。但愿你心底关怀，杯满四溢，又正在被另一个孤独的灵魂渴望着。 7.但愿你记得，在你痛哭失声的时刻，曾有人以肩窝盛满你的泪。 8.路是时光的血脉，通向生命不可知的隘口。 9.我想去相信一个人，非常想。可是每个人在这个世界上忙着生，忙着死，所有人都是如此窘迫的姿态。令我不忍心再向别人索求关怀。如果我们想不对人或事失望，惟一的方法就是不要对它给予任何希望。这不是绝望，这是生存下去的惟一途径，亦是获取幸福感的前提。 10.我想，沉默是成长的标志，而成熟的标志，就是如何去沉默。我不能说我们生如夏花，活得完美而睿智，死如秋叶亦离我们非常遥远，当下最真实的，不过是一种宽宏和原谅，对自身、他人，以及这个失望和希望并存的世界。 11.在这个吵得人分不清东南西北得世界里，我们手里所持有的干干净净的初衷，不多了。握好了，别丢了。明天还要赶很远的路。 12.隐忍平凡的外壳下，要像果实般有着汁甜水蜜的肉瓤，以及一颗坚硬闪亮的内核。 13.心之所向，素履以往。生如逆旅， 一苇以航。 14.做学生的时候，身是不自由的，但心却很自由，有多远梦多远。而今，身是自由的，但心已经无法自由。有多少梦，就有多远。 15.一段感情若势如破竹，最后也往往兵败如山倒。但也曾算是，像把每一天当成是最后一天来珍惜生命那般，把眼前人当成是最后一个人来珍惜感情。奈何世事无常，人无常，爱无常。花辞树，以叶为美。叶落尽，以枝为姿。枝若朽，以根为雕。感情若如四季，我愿如良木。]]></content>
      <categories>
        <category>美文</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
</search>

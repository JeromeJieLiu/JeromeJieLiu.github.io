<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thorn的分享小站</title>
  
  <subtitle>听从你心,无问西东</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-09T13:46:54.681Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Thorn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis配置文件标签介绍</title>
    <link href="http://yoursite.com/2018/10/09/MyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/10/09/MyBatis配置文件标签介绍/</id>
    <published>2018-10-09T12:03:05.000Z</published>
    <updated>2018-10-09T13:46:54.681Z</updated>
    
    <content type="html"><![CDATA[<p>对Mybatis配置文件中常用的标签进行总结介绍</p><a id="more"></a><h1 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印查询语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置和数据库链接相关的信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--四大件</span></span><br><span class="line"><span class="comment">    驱动</span></span><br><span class="line"><span class="comment">    地址</span></span><br><span class="line"><span class="comment">    用户名</span></span><br><span class="line"><span class="comment">    密码</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    default 默认的环境, 在这个配置文件中 可以创建多个环境,如果有多个的时候需要指定默认值,这个值就是下面环境的id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///数据库名?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/qianfeng/mybatis/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第二种--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用下面的注册方式需要满足以下三点要求：</span></span><br><span class="line"><span class="comment">1) 映射文件要与Dao接口在同一个包下</span></span><br><span class="line"><span class="comment">2) 映射文件名要与Dao接口的简单类名相同</span></span><br><span class="line"><span class="comment">3) 映射文件的&lt;mapper/&gt;标签的namespace属性值为Dao接口的全限定性类名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">满足以上三个条件，那么这里的class属性值就可以填写Dao接口的全限定性类名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.qianfeng.mybatis.mapper.OderMapper"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第三种--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用下面的注册方式需要满足以下四点要求：</span></span><br><span class="line"><span class="comment">1) 映射文件要与Dao接口在同一个包下</span></span><br><span class="line"><span class="comment">2) 映射文件名要与Dao接口的简单类名相同</span></span><br><span class="line"><span class="comment">3) 映射文件的&lt;mapper/&gt;标签的namespace属性值为Dao接口的全限定性类名</span></span><br><span class="line"><span class="comment">4) 使用动态Mapper</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">满足以上四个条件，那么这里的name属性值就可以填写Dao接口所在的包名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.qianfeng.mybatis.mapper"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--第四种--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 下面的方式可以使映射文件存放到本地文件系统，但此方式不常用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///e:/mapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace 命名空间</span></span><br><span class="line"><span class="comment">对sql的statement进行分类的,我们调用这里面sql</span></span><br><span class="line"><span class="comment">语句的时候会使用</span></span><br><span class="line"><span class="comment">在进行接口式编程时这里是对应接口的全限定名称</span></span><br><span class="line"><span class="comment">如&lt;mapper namespace="com.qianfeng.mybatis.mapper.UserMapper"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id 代表当前sql语句的id,我们需要通过这个id来找到这个sql语句</span></span><br><span class="line"><span class="comment">    parameterType: 代表的是参数的数据类型, mybatis内部帮我们封装了一些类型  比如 int代表的是  java.lang.Integer</span></span><br><span class="line"><span class="comment">    resultType: 返回结果的全限定名称,或者是mybatis内置的类型</span></span><br><span class="line"><span class="comment">    public String com.qianfeng.mybatis.pojo.User.getId()//方法的全限定名称</span></span><br><span class="line"><span class="comment">   #&#123;&#125; 占位符,相当于我们在使用jdbc的时候的? ,里面写什么呢? 如果是一个参数,并且参数的类型是基本数据类型或者是字符串的时候,可以随便写</span></span><br><span class="line"><span class="comment">    但是为了方便了解是做什么或者是为了方便知道参数的含义,建议写对应的数据名字</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在进行接口式编程时</span></span><br><span class="line"><span class="comment">    id必须和接口中对应方法的名字一样</span></span><br><span class="line"><span class="comment">    parameterType 必须和方法的参数一致</span></span><br><span class="line"><span class="comment">    resultType必须和方法的返回值一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">      SELECT * FROM tb_user WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="insert标签"><a href="#insert标签" class="headerlink" title="insert标签"></a>insert标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       insert是sql里面最特殊的一个语句,只有两种结果,一个是成功,一个是抛异常,不像update</span></span><br><span class="line"><span class="comment">       #&#123;username&#125;代表从user对象中获取一个名字叫username的属性(注意不是变量名),属性就是get/set方法去掉getting/set后首字母小写</span></span><br><span class="line"><span class="comment">       当参数是一个对象的时候,这里面要通过占位符的方式进行填写参数,参数的名字就是要作为参数值的属性的属性名</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">       INSERT INTO tb_user (username,password,email,gender,flag,role,code) VALUES (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;flag&#125;,#&#123;role&#125;,#&#123;code&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>delete标签与update标签参照上面理解</strong></p><h2 id="selectkey标签"><a href="#selectkey标签" class="headerlink" title="selectkey标签"></a>selectkey标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">selectKey: 获取主键</span></span><br><span class="line"><span class="comment">resultType: 主键值的类型</span></span><br><span class="line"><span class="comment">keyProperty： 代表主键的值放入到参数中的哪个属性上面,比如当前期望将主键的值放到我们的user对象的id属性上面</span></span><br><span class="line"><span class="comment">order: 代表selectKey对应的sql语句的执行顺序,在下面真正的sql语句执行之前还是之后执行,此处我们需要插入数据之后才能知道结果,所以是after</span></span><br><span class="line"><span class="comment">SELECT LAST_INSERT_ID() 获取最后一次插入的主键,这个方法只能获取当前事物中的最后一次插入主键</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser1"</span> <span class="attr">parameterType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         SELECT LAST_INSERT_ID()</span><br><span class="line">     <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       INSERT INTO tb_user (iusername,password,email,gender,flag,role,code) VALUES (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;flag&#125;,#&#123;role&#125;,#&#123;code&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态sql标签"><a href="#动态sql标签" class="headerlink" title="动态sql标签"></a>动态sql标签</h2><p>mybatis的动态sql语句是基于OGNL表达式的，可以方便的在sql语句中实现某些逻辑。</p><p>mybatis的动态sql标签分为以下几类</p><ul><li><p><strong><em>if标签（简单的条件判断）</em></strong></p></li><li><p><strong><em>where标签（主要用来简化sql语句中的wheret条件判断，能够智能处理 and or,不必担心多余导致语法错误）</em></strong></p></li><li><strong><em>choose标签（when,otherwize）相当于java中的switch，与jstl中的choose类似</em></strong></li><li><strong><em>trim标签（对包含的内容加上prefix,或者suffix等，前缀和后缀）</em></strong></li><li><strong><em>set标签（主要用于更新时）</em></strong></li><li><strong><em>foreach标签(主要用于mybatis in 语句查询时)</em></strong></li></ul><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogWithTitleLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">     AND title like #&#123;title&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询数据的时候,会有多个条件</span></span><br><span class="line"><span class="comment">        但是这些条件会出现可能会有,可能没有的情况</span></span><br><span class="line"><span class="comment">    select * from xxx where a=xxx and b =xxx and c =xxx</span></span><br><span class="line"><span class="comment">    不允许出现where 1=1 因为这会导致数据库索引失效</span></span><br><span class="line"><span class="comment">      &lt;where&gt; 会自动去掉第一个符合条件的and</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByMult"</span> <span class="attr">resultType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">    SELECT  id, username, password, email, gender, flag, role, code from tb_user</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username !=''"</span>&gt;</span></span><br><span class="line">        and username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email !=''"</span>&gt;</span></span><br><span class="line">        and email=#&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当when标签条件成立时就执行，然后跳出，当所有的when标签条件都不成立的时候，执行otherwiseb标签中的内容</span></span><br><span class="line"><span class="comment">when和otherwise条件只有一个会输出</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicChooseTest"</span> <span class="attr">parameterType</span>=<span class="string">"Blog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     select * from t_blog where 1 = 1</span><br><span class="line">     <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">         and title = #&#123;title&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"content != null"</span>&gt;</span></span><br><span class="line">         and content = #&#123;content&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">         and owner = "owner1"</span><br><span class="line">         <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set标签主要用于更新操作的时候</span></span><br><span class="line"><span class="comment">主要是在包含语句前面输出一个set</span></span><br><span class="line"><span class="comment">如果包含语句是以逗号（，）结束的话，会将其忽略</span></span><br><span class="line"><span class="comment">如果set包含内容为空的话，会报错</span></span><br><span class="line"><span class="comment">使用set可以动态更新修改字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser_if_set"</span> <span class="attr">parameterType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">     UPDATE user</span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!= null and username != '' "</span>&gt;</span></span><br><span class="line">         username = #&#123;username&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex!= null and sex!= '' "</span>&gt;</span></span><br><span class="line">         sex = #&#123;sex&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null "</span>&gt;</span></span><br><span class="line">         birthday = #&#123;birthday&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">     WHERE user_id = #&#123;userid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h3><p>trim标签是更加灵活用于去除多余关键字的标签，它可以用来实现where和set的效果</p><p>主要包括四个属性</p><ul><li><strong>prefix:在包含内容之前加上某些前缀</strong></li><li><strong>suffix:在包含内容之后加上某些后缀</strong></li><li><strong>prefixOverrides：把包含内容首部的某些内容覆盖掉，即忽略</strong></li><li><strong>suffixOverrides：把包含内容尾部的某些内容覆盖掉，即忽略</strong></li></ul><h4 id="trim代替where"><a href="#trim代替where" class="headerlink" title="trim代替where"></a>trim代替where</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicTrimTest"</span> <span class="attr">parameterType</span>=<span class="string">"Blog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     select * from t_blog</span><br><span class="line">     <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and |or"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">         title = #&#123;title&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"content != null"</span>&gt;</span></span><br><span class="line">         and content = #&#123;content&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"owner != null"</span>&gt;</span></span><br><span class="line">         or owner = #&#123;owner&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="trim代替set"><a href="#trim代替set" class="headerlink" title="trim代替set"></a>trim代替set</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser_if_trim"</span> <span class="attr">parameterType</span>=<span class="string">"com.qf.pojo.User"</span>&gt;</span></span><br><span class="line">     UPDATE user</span><br><span class="line">     <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != '' "</span>&gt;</span></span><br><span class="line">         username = #&#123;username&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null and sex != '' "</span>&gt;</span></span><br><span class="line">         sex = #&#123;sex&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null "</span>&gt;</span></span><br><span class="line">         birthday = #&#123;birthday&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">     WHERE user_id = #&#123;user_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>foreach标签主要用于构建in条件中</p><p>主要包括六个属性</p><ul><li><strong>index: 指定一个名字，用于迭代过程中，每次迭代到的位置</strong></li><li><strong>collection: 代表要遍历的存放参数的集合</strong></li><li><strong>item: 每次遍历后的参数存放的位置</strong></li><li><strong>open: 遍历之前添加什么内容</strong></li><li><strong>close: 遍历完成之后添加什么</strong></li><li><strong>separator: 分隔符 ,每次遍历之后添加分隔符,但是最后一次遍历不添加</strong></li></ul><p>collection属性的值必须指定，但是在不同情况下，该属性的值是不一样的</p><p>主要有以下三种情况</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单参数，且参数类型是一个list的时候 collection属性值为list--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicForeachTest"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     select * from t_blog where id in</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span></span></span><br><span class="line"><span class="tag">    <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">     #&#123;item&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单参数，且参数类型是一个array的时候 collection属性值为array--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicForeach2Test"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     select * from t_blog where id in</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span></span></span><br><span class="line"><span class="tag">    <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">     #&#123;item&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第三种--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果传入的参数是多个的话，我们就需要把它封装成map集合</span></span><br><span class="line"><span class="comment">当然单参数也可以封装成map，实际上如果你在传入参数的时候，</span></span><br><span class="line"><span class="comment">在breast里面也是会把它封装成一个Map的，</span></span><br><span class="line"><span class="comment"> map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicForeach3Test"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     select * from t_blog where title like "%"#&#123;title&#125;"%" and id in</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span></span></span><br><span class="line"><span class="tag">    <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">     #&#123;item&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##include标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">声明一个sql语句,此语句可以被复用 使用方式在使用的地方通过include id= sql id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"getall"</span>&gt;</span></span><br><span class="line">    SELECT  id, username, password, email, gender, flag, role, code from tb_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">include</span></span><br><span class="line"><span class="comment">导入一条已经声明好的sql语句</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByMult1"</span> <span class="attr">resultType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"getall"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username !=''"</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email !=''"</span>&gt;</span></span><br><span class="line">            and email=#&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##resultmap标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   resultMap 返回结果的映射,主要用于,返回的列的name与对象本身不一致,或者是多表关联的时候</span></span><br><span class="line"><span class="comment">属性</span></span><br><span class="line"><span class="comment">   id 当前resultmap的标记</span></span><br><span class="line"><span class="comment">   type 当前resultmap真正的返回结果类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   标签</span></span><br><span class="line"><span class="comment">id sql中返回的列中主键的列名, </span></span><br><span class="line"><span class="comment">column sql语句返回的列名，property代表在最终对象上面的属性名</span></span><br><span class="line"><span class="comment">   result 普通属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderby"</span> <span class="attr">type</span>=<span class="string">"com.qianfeng.mybatis.pojo.Order"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id_"</span> <span class="attr">property</span>=<span class="string">"id"</span>  <span class="attr">javaType</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money_"</span> <span class="attr">property</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"status_"</span> <span class="attr">property</span>=<span class="string">"status"</span>/&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   将返回结果通过resultmap进行解析处理</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderById1"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultMap</span>=<span class="string">"orderby"</span>&gt;</span></span><br><span class="line">       select id id_ ,  money money_ , status status_  from tb_order where id =#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="association标签-一对一关系"><a href="#association标签-一对一关系" class="headerlink" title="association标签(一对一关系)"></a>association标签(一对一关系)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"addressresultmap"</span> <span class="attr">type</span>=<span class="string">"com.qianfeng.mybatis.pojo.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"detail"</span> <span class="attr">column</span>=<span class="string">"detail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对一的标签</span></span><br><span class="line"><span class="comment">    property 当前这个一的对象在最终返回结果对象中的属性名</span></span><br><span class="line"><span class="comment">    javaType 指的是关联对象的类型,不设置javatype的话不会给我们自动创建对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAddressAndUserInfoByAddressId"</span> <span class="attr">resultMap</span>=<span class="string">"addressresultmap"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    SELECT  a.id aid,a.detail , a.name,a.phone,a.level,u.id,u.username,u.password,u.email,u.gender,u.flag,u.role,u.code  from tb_address  a ,tb_user u where a.uid=u.id and a.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>####collection标签(一对多关系)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">一对多的关系</span></span><br><span class="line"><span class="comment">collection 在user对象中 oders集合的属性名, 也就多的一方在少的一方中的属性名</span></span><br><span class="line"><span class="comment">ofType 集合的泛型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userorderresultmap"</span> <span class="attr">type</span>=<span class="string">"com.qianfeng.mybatis.pojo.User"</span> <span class="attr">extends</span>=<span class="string">"basemap"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;id column="uid" property="id"&gt;&lt;/id&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column="username" property="username"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column="password" property="password"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orders"</span> <span class="attr">ofType</span>=<span class="string">"com.qianfeng.mybatis.pojo.Order"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"status"</span> <span class="attr">property</span>=<span class="string">"status"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndOrderByUserId"</span> <span class="attr">resultMap</span>=<span class="string">"userorderresultmap"</span>&gt;</span></span><br><span class="line">        select  u.id uid , u.username, u.password,o.id,o.money,o.status from tb_user u ,tb_order o where  u.id=o.uid and u.id =#&#123;id&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Mybatis配置文件中常用的标签进行总结介绍&lt;/p&gt;
    
    </summary>
    
      <category term="SSM框架" scheme="http://yoursite.com/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis逆向工程</title>
    <link href="http://yoursite.com/2018/10/09/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/09/MyBatis逆向工程/</id>
    <published>2018-10-09T11:57:03.000Z</published>
    <updated>2018-10-09T13:47:33.844Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis逆向工程步骤</p><a id="more"></a><h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>KenShrio<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--指定配置文件位置--&gt;</span></span><br><span class="line">                                                 <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Run As Maven build : Goals 参数 : mybatis-generator:generate -Dmybatis.generator.overwrite=true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 tableName,使用 Run As Maven build 生成 dao model 层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置文件路径</span></span><br><span class="line"><span class="comment">    &lt;properties url="$&#123;mybatis.generator.generatorConfig.properties&#125;"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"F:\Maven\repository\mysql\mysql-connector-java\5.1.46\mysql-connector-java-5.1.46.jar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关闭注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/db_shopping?useUnicode=true&amp;amp;characterEncoding=utf-8"</span> <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"971016"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成的model 包路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.qianfeng.pojo"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"ture"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成xml mapper文件 路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.qianfeng.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"ture"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成的Dao接口 的包路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.qianfeng.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"ture"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--对应数据库表名，多个表，请复制指定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_address"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_goods"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_goods_type"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_order"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_orderdetail"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tb_user"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="maven命令生成"><a href="#maven命令生成" class="headerlink" title="maven命令生成"></a>maven命令生成</h1><p>mvn:mybatis-generator:generate</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis逆向工程步骤&lt;/p&gt;
    
    </summary>
    
      <category term="SSM框架" scheme="http://yoursite.com/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybits" scheme="http://yoursite.com/tags/Mybits/"/>
    
  </entry>
  
  <entry>
    <title>IDEA的配置使用</title>
    <link href="http://yoursite.com/2018/10/08/IDEA%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/08/IDEA的配置使用/</id>
    <published>2018-10-08T11:52:02.000Z</published>
    <updated>2018-10-08T12:32:05.905Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA使用总结</p><a id="more"></a><h1 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h1><p><img src="/img/idea1.png"></p><h1 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a>设置模板</h1><p><img src="/img/idea2.png"></p><p>##mybatis.xml模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置运行环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/abc/dao/mapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mapper-xml模板"><a href="#mapper-xml模板" class="headerlink" title="mapper.xml模板"></a>mapper.xml模板</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#设置修改警告信息</p><p><img src="/img/idea3.png"></p><h1 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h1><p><img src="/img/idea4.png"></p><h1 id="设置快捷键输出（例syso和main）"><a href="#设置快捷键输出（例syso和main）" class="headerlink" title="设置快捷键输出（例syso和main）"></a>设置快捷键输出（例syso和main）</h1><p>##先创建java分组</p><p><img src="/img/idea5.png"></p><h2 id="然后创建快捷输出"><a href="#然后创建快捷输出" class="headerlink" title="然后创建快捷输出"></a>然后创建快捷输出</h2><pre><code>&lt;img src=&quot;/img/idea6.png&quot;&gt;</code></pre><h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Shift + Enter，语句完成</span><br><span class="line">“！”，否定完成，输入表达式时按 “！”键</span><br><span class="line">Ctrl+E，最近的文件</span><br><span class="line">Ctrl+Shift+E，最近更改的文件</span><br><span class="line">Shift+Click，可以关闭文件</span><br><span class="line">Ctrl+[ OR ]，可以跑到大括号的开头与结尾</span><br><span class="line">Ctrl+F12，可以显示当前文件的结构</span><br><span class="line">Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</span><br><span class="line">Ctrl+N，可以快速打开类</span><br><span class="line">Ctrl+Shift+N，可以快速打开文件</span><br><span class="line">Alt+Q，可以看到当前方法的声明</span><br><span class="line">Ctrl+P，可以显示参数信息</span><br><span class="line">Ctrl+Shift+Insert，可以选择剪贴板内容并插入</span><br><span class="line">Alt+Insert，可以生成构造器/Getter/Setter等</span><br><span class="line">Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义</span><br><span class="line">Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</span><br><span class="line">Ctrl+Enter，导入包，自动修正</span><br><span class="line">Ctrl+Alt+L，格式化代码</span><br><span class="line">Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</span><br><span class="line">Ctrl+Alt+O，优化导入的类和包</span><br><span class="line">Ctrl+R，替换文本</span><br><span class="line">Ctrl+F，查找文本</span><br><span class="line">Ctrl+Shift+Space，自动补全代码</span><br><span class="line">Ctrl+空格，代码提示（与系统输入法快捷键冲突）</span><br><span class="line">Ctrl+Shift+Alt+N，查找类中的方法或变量</span><br><span class="line">Alt+Shift+C，最近的更改</span><br><span class="line">Alt+Shift+Up/Down，上/下移一行</span><br><span class="line">Shift+F6，重构 – 重命名</span><br><span class="line">Ctrl+X，删除行</span><br><span class="line">Ctrl+D，复制行</span><br><span class="line">Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）</span><br><span class="line">Ctrl+J，自动代码（例如：serr）</span><br><span class="line">Ctrl+Alt+J，用动态模板环绕</span><br><span class="line">Ctrl+H，显示类结构图（类的继承层次）</span><br><span class="line">Ctrl+Q，显示注释文档</span><br><span class="line">Alt+F1，查找代码所在位置</span><br><span class="line">Alt+1，快速打开或隐藏工程面板</span><br><span class="line">Ctrl+Alt+left/right，返回至上次浏览的位置</span><br><span class="line">Alt+left/right，切换代码视图</span><br><span class="line">Alt+Up/Down，在方法间快速移动定位</span><br><span class="line">Ctrl+Shift+Up/Down，向上/下移动语句</span><br><span class="line">F2 或 Shift+F2，高亮错误或警告快速定位</span><br><span class="line">Tab，代码标签输入完成后，按 Tab，生成代码</span><br><span class="line">Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</span><br><span class="line">Alt+F3，逐个往下查找相同文本，并高亮显示</span><br><span class="line">Ctrl+Up/Down，光标中转到第一行或最后一行下</span><br><span class="line">Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</span><br><span class="line">Ctrl+Alt+B，跳转到方法实现处</span><br><span class="line">Ctrl+Shift+Backspace，跳转到上次编辑的地方</span><br><span class="line">Ctrl+O，重写方法</span><br><span class="line">Ctrl+Alt+Space，类名自动完成</span><br><span class="line">Ctrl+Alt+Up/Down，快速跳转搜索结果</span><br><span class="line">Ctrl+Shift+J，整合两行</span><br><span class="line">Alt+F8，计算变量值</span><br><span class="line">Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</span><br><span class="line">Ctrl+Alt+Shift+V，简单粘贴</span><br><span class="line">Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</span><br><span class="line">F12，把焦点从编辑器移到最近使用的工具窗口</span><br><span class="line">Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</span><br><span class="line">Ctrl+W，可以选择单词继而语句继而行继而函数</span><br><span class="line">Ctrl+Shift+W，取消选择光标所在词</span><br><span class="line">Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</span><br><span class="line">Ctrl+I，实现方法</span><br><span class="line">Ctrl+Shift+U，大小写转化</span><br><span class="line">Ctrl+Y，删除当前行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Shift+Enter，向下插入新行</span><br><span class="line">psvm/sout，main/System.out.println(); Ctrl+J，查看更多</span><br><span class="line">Ctrl+Shift+F，全局查找</span><br><span class="line">Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</span><br><span class="line">Ctrl+Shift+S，高级搜索</span><br><span class="line">Ctrl+U，转到父类</span><br><span class="line">Ctrl+Alt+S，打开设置对话框</span><br><span class="line">Alt+Shift+Inert，开启/关闭列选择模式</span><br><span class="line">Ctrl+Alt+Shift+S，打开当前项目/模块属性</span><br><span class="line">Ctrl+G，定位行</span><br><span class="line">Alt+Home，跳转到导航栏</span><br><span class="line">Ctrl+Enter，上插一行</span><br><span class="line">Ctrl+Backspace，按单词删除</span><br><span class="line">Ctrl+”+/-”，当前方法展开、折叠</span><br><span class="line">Ctrl+Shift+”+/-”，全部展开、折叠</span><br><span class="line">【调试部分、编译】</span><br><span class="line">Ctrl+F2，停止</span><br><span class="line">Alt+Shift+F9，选择 Debug</span><br><span class="line">Alt+Shift+F10，选择 Run</span><br><span class="line">Ctrl+Shift+F9，编译</span><br><span class="line">Ctrl+Shift+F10，运行</span><br><span class="line">Ctrl+Shift+F8，查看断点</span><br><span class="line">F8，步过</span><br><span class="line">F7，步入</span><br><span class="line">Shift+F7，智能步入</span><br><span class="line">Shift+F8，步出</span><br><span class="line">Alt+Shift+F8，强制步过</span><br><span class="line">Alt+Shift+F7，强制步入</span><br><span class="line">Alt+F9，运行至光标处</span><br><span class="line">Ctrl+Alt+F9，强制运行至光标处</span><br><span class="line">F9，恢复程序</span><br><span class="line">Alt+F10，定位到断点</span><br><span class="line">Ctrl+F8，切换行断点</span><br><span class="line">Ctrl+F9，生成项目</span><br><span class="line">Alt+1，项目</span><br><span class="line">Alt+2，收藏</span><br><span class="line">Alt+6，TODO</span><br><span class="line">Alt+7，结构</span><br><span class="line">Ctrl+Shift+C，复制路径</span><br><span class="line">Ctrl+Alt+Shift+C，复制引用，必须选择类名</span><br><span class="line">Ctrl+Alt+Y，同步</span><br><span class="line">Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</span><br><span class="line">Shift+F12，还原默认布局</span><br><span class="line">Ctrl+Shift+F12，隐藏/恢复所有窗口</span><br><span class="line">Ctrl+F4，关闭</span><br><span class="line">Ctrl+Shift+F4，关闭活动选项卡</span><br><span class="line">Ctrl+Tab，转到下一个拆分器</span><br><span class="line">Ctrl+Shift+Tab，转到上一个拆分器</span><br><span class="line">【重构】</span><br><span class="line">Ctrl+Alt+Shift+T，弹出重构菜单</span><br><span class="line">Shift+F6，重命名</span><br><span class="line">F6，移动</span><br><span class="line">F5，复制</span><br><span class="line">Alt+Delete，安全删除</span><br><span class="line">Ctrl+Alt+N，内联</span><br><span class="line">【查找】</span><br><span class="line">Ctrl+F，查找</span><br><span class="line">Ctrl+R，替换</span><br><span class="line">F3，查找下一个</span><br><span class="line">Shift+F3，查找上一个</span><br><span class="line">Ctrl+Shift+F，在路径中查找</span><br><span class="line">Ctrl+Shift+R，在路径中替换</span><br><span class="line">Ctrl+Shift+S，搜索结构</span><br><span class="line">Ctrl+Shift+M，替换结构</span><br><span class="line">Alt+F7，查找用法</span><br><span class="line">Ctrl+Alt+F7，显示用法</span><br><span class="line">Ctrl+F7，在文件中查找用法</span><br><span class="line">Ctrl+Shift+F7，在文件中高亮显示用法</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA使用总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>mysql总结(二)</title>
    <link href="http://yoursite.com/2018/09/04/mysql%E6%80%BB%E7%BB%93-%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/09/04/mysql总结-二/</id>
    <published>2018-09-04T11:36:16.000Z</published>
    <updated>2018-09-04T12:47:29.889Z</updated>
    
    <content type="html"><![CDATA[<p>本文对msql的数据完整性，约束详细介绍了，还有一些多表查询涉及到的连接查询和子查询的总结，</p><p>最后还有一些mysql的数据库导入导出，创建用户和授权命令的介绍和例子。</p><a id="more"></a><h3 id="Mysql数据完整性"><a href="#Mysql数据完整性" class="headerlink" title="Mysql数据完整性"></a>Mysql数据完整性</h3><p>作用：保证用户输入的数据保存到数据库中是正确的。</p><p>确保数据的完整性 = 在创建表时给表中添加约束</p><p>完整性的分类</p><ul><li><strong>实体完整性</strong></li><li><strong>域完整性</strong></li><li><strong>引用完整性</strong></li></ul><h4 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h4><p>实体：即表中的一行（一条记录）代表一个实体</p><p>实体完整性的作用：标识每一行数据不重复</p><p>保证实体完整性的约束类型：</p><ul><li><strong>主键约束（primary key）</strong></li><li><strong>唯一约束(unique)</strong></li><li><strong>自动增长约束auto_increment)</strong></li></ul><h5 id="主键约束（primary-key）"><a href="#主键约束（primary-key）" class="headerlink" title="主键约束（primary key）"></a>主键约束（primary key）</h5><p>每个表中要有一个主键</p><p>特点：数据唯一，切不能为NULL</p><p>三种添加方式</p><h6 id="第一种添加方式（常用）"><a href="#第一种添加方式（常用）" class="headerlink" title="第一种添加方式（常用）"></a>第一种添加方式（常用）</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="第二种添加方式（此种方式优势在于，可以创建联合主键）"><a href="#第二种添加方式（此种方式优势在于，可以创建联合主键）" class="headerlink" title="第二种添加方式（此种方式优势在于，可以创建联合主键）"></a>第二种添加方式（此种方式优势在于，可以创建联合主键）</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">classid <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    stuid <span class="built_in">int</span>,</span><br><span class="line">primary <span class="keyword">key</span>(classid,stuid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="第三种添加方式（不推荐）"><a href="#第三种添加方式（不推荐）" class="headerlink" title="第三种添加方式（不推荐）"></a>第三种添加方式（不推荐）</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">) ;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student  <span class="keyword">ADD</span>  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><h5 id="唯一约束（unique）"><a href="#唯一约束（unique）" class="headerlink" title="唯一约束（unique）"></a>唯一约束（unique）</h5><p>特点：数据不能重复，可以为NULL.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student&#123;</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动增长列（auto-increment）"><a href="#自动增长列（auto-increment）" class="headerlink" title="自动增长列（auto_increment）"></a>自动增长列（auto_increment）</h5><p> sqlserver数据库 (identity)  oracle数据库( sequence)</p><p>给主键添加自动增长的数值，列只能是整数类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">Id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">) auto_increment=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="域完整性"><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h4><p>域完整性的作用：限制此单元格的数据正确，不对照此列的其它单元格比较</p><p>域代表当前单元格</p><p>域完整性约束：数据类型、非空约束（not null）、默认值约束(default)  </p><p>check约束（mysql不支持）check(sex=’男’or  sex=’女’)</p><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>基本数据类型上文已经介绍过了</p><p>这次主要介绍字符串类型和日期类型</p><h6 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h6><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性</p><table><thead><tr><th>类型</th><th>大小(字节)</th><th>范围</th><th>格式</th></tr></thead><tbody><tr><td><strong>DATE</strong></td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td></tr><tr><td><strong>DATETIME</strong></td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038 结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td></tr></tbody></table><h6 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h6><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td><strong>CHAR</strong></td><td>0-255字符</td><td>定长字符串  char(10) 10个字符</td></tr><tr><td>VARCHAR</td><td>0-65535字符</td><td>变长字符串 varchar(10) 10个符</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td><strong>BLOB</strong>（binary large object）</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td><strong>TEXT</strong></td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr></tbody></table><p>CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY和VARBINARY类类似于CHAR和VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</p><p>有4种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT。</p><h5 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束(not null)"></a>非空约束(not null)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">Id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Sex <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="默认值约束（default）"><a href="#默认值约束（default）" class="headerlink" title="默认值约束（default）"></a>默认值约束（default）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">Id</span> <span class="built_in">int</span> pirmary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Sex <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'男'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> intostudent1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> intostudent1 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'jerry'</span>,<span class="keyword">default</span>);</span><br></pre></td></tr></table></figure><h4 id="引用完整性（参照完整性）"><a href="#引用完整性（参照完整性）" class="headerlink" title="引用完整性（参照完整性）"></a>引用完整性（参照完整性）</h4><h5 id="外键约束（FOREIGN-KEY）"><a href="#外键约束（FOREIGN-KEY）" class="headerlink" title="外键约束（FOREIGN KEY）"></a>外键约束（FOREIGN KEY）</h5><p>两种添加方式</p><h6 id="第一种方式（推荐）"><a href="#第一种方式（推荐）" class="headerlink" title="第一种方式（推荐）"></a>第一种方式（推荐）</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#学生表(主表)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'男'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#成绩表（从表）</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">        <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">        score <span class="built_in">int</span>,</span><br><span class="line">        <span class="keyword">sid</span> <span class="built_in">int</span> , </span><br><span class="line">        <span class="keyword">CONSTRAINT</span> fk_score_sid foreign <span class="keyword">key</span>(<span class="keyword">sid</span>) <span class="keyword">references</span> student(<span class="keyword">sid</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 外键列的数据类型一定要与主键的类型一致</span></span><br></pre></td></tr></table></figure><h6 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> score <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_score FOREIGN <span class="keyword">KEY</span>(<span class="keyword">sid</span>) <span class="keyword">REFERENCES</span> student(<span class="keyword">sid</span>);</span><br></pre></td></tr></table></figure><h3 id="mysql中连接查询"><a href="#mysql中连接查询" class="headerlink" title="mysql中连接查询"></a>mysql中连接查询</h3><h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h4><p>特点：查询结果必须满足查询条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> emp e </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d </span><br><span class="line"><span class="keyword">ON</span> e.deptno=d.deptno;</span><br><span class="line">注意：on后面 主外键关系</span><br></pre></td></tr></table></figure><h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h4><p>包括左外连接和右外连接</p><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>特点：查询出的结果存在不满足条件的可能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp e </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d </span><br><span class="line"><span class="keyword">ON</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><p>左连接是先查询出左表（即以左表为主），然后查询右表，左表中满足条件和不满足条件都显示出来，右边不满足条件的显示NULL。</p><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp e </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d </span><br><span class="line"><span class="keyword">ON</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><p>右连接就是先把右表中所有记录都查询出来，然后左表满足条件的显示，不满足显示NULL。</p><h4 id="连接查询总结"><a href="#连接查询总结" class="headerlink" title="连接查询总结"></a>连接查询总结</h4><p>连接不限于两张表，连接查询也可以是三张、四张，甚至N张表的连接查询。通常连接查询不可能需要整个笛卡尔积，而只是需要其中一部分，那么这时就需要使用条件来去除不需要的记录。这个条件大多数情况下都是使用主外键关系去除。</p><h3 id="mysql中子查询"><a href="#mysql中子查询" class="headerlink" title="mysql中子查询"></a>mysql中子查询</h3><p>一个select语句中包含另一个完整的select语句。</p><p>子查询就是嵌套查询，即SELECT中包含SELECT，如果一条语句中存在两个，或两个以上SELECT，那么就是子查询语句了。里面的查询叫做子查询，外层的查询叫父查询，一般情况都是先执行子查询，再执行父查询。</p><p>l  子查询出现的位置：</p><pre><code>a. where后，作为被查询的条件的一部分；b. from后，作临时表；</code></pre><p>l  当子查询出现在where后作为条件时，还可以使用如下关键字：</p><pre><code>a. anyb. all</code></pre><p>l  子查询结果集的形式：</p><pre><code>a. 单行单列（用于条件）b. 多行单列（用于条件）c. 多行多列（用于表）</code></pre><h4 id="单行单列"><a href="#单行单列" class="headerlink" title="单行单列"></a>单行单列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno = (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename=<span class="string">'SCOTT'</span>);</span><br></pre></td></tr></table></figure><h4 id="多行单列"><a href="#多行单列" class="headerlink" title="多行单列"></a>多行单列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * FROMemp <span class="keyword">WHERE</span> sal&gt;(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(sal)<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>l  子查询作为条件</p><p>l  子查询形式为多行单列（当子查询结果集形式为多行单列时可以使用ALL或ANY关键字）</p><h5 id="all关键字"><a href="#all关键字" class="headerlink" title="all关键字"></a>all关键字</h5><p>大于查询出来的所有结果，即大于查询结果的最大值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal &gt; ALL (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h5 id="any关键字"><a href="#any关键字" class="headerlink" title="any关键字"></a>any关键字</h5><p>大于查询出来的结果任意一个就好，即大于查询结果的最小值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal &gt; <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h4 id="多行多列"><a href="#多行多列" class="headerlink" title="多行多列"></a>多行多列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,job,hiredate <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ename,job,hiredate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate&gt;<span class="string">'1987-1-1'</span>) <span class="keyword">AS</span> temp;</span><br></pre></td></tr></table></figure><p>注意：必须要对子查询结果起一个别名，不然会出错。</p><h3 id="mysql其他命令"><a href="#mysql其他命令" class="headerlink" title="mysql其他命令"></a>mysql其他命令</h3><h4 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &gt; school.sql</span><br></pre></td></tr></table></figure><h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt;use 数据库</span><br><span class="line">然后使用source命令，后面参数为脚本文件(如这里用到的.sql)</span><br><span class="line">mysql&gt;source d:/dbname.sql</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">`zhangsan`</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">`zhangsan`</span>@<span class="string">`localhost`</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> school.* <span class="keyword">TO</span> <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h4 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> ALL <span class="keyword">ON</span> school.* <span class="keyword">FROM</span> <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对msql的数据完整性，约束详细介绍了，还有一些多表查询涉及到的连接查询和子查询的总结，&lt;/p&gt;
&lt;p&gt;最后还有一些mysql的数据库导入导出，创建用户和授权命令的介绍和例子。&lt;/p&gt;
    
    </summary>
    
      <category term="命令" scheme="http://yoursite.com/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>二十三种设计模式（一）单例模式</title>
    <link href="http://yoursite.com/2018/09/03/%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/09/03/二十三种设计模式（一）单例模式/</id>
    <published>2018-09-03T03:46:15.000Z</published>
    <updated>2018-09-03T09:49:08.214Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式可以说是23中设计模式中最容易的实现和理解的设计模式了，不过单例模式写很容易，但是写好就不容易了，因为单例模式中也隐藏了很多的问题，趁着这次机会，结合网上的一些博客，对单例模式做了一个总结。</p><p>这篇文章对单例模式的大部分问题，都进行了总结描述，并提供了解决方法。</p><p>接下来还会对其他设计模式进行总结，不过我对一些问题，总喜欢尽可能的全面了解，所以每一种设计模式，我都会参考阅读很多文献，尽可能的包括大部分内容，所以更新速度可能较慢。</p><p>对于一些问题，有兴趣深入了解的朋友，我也在文章后面附上了我参考的一些链接，希望我们可以共同进步。</p><a id="more"></a><h3 id="单例模式概念"><a href="#单例模式概念" class="headerlink" title="单例模式概念"></a>单例模式概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</span><br></pre></td></tr></table></figure><h3 id="单例模式的特点"><a href="#单例模式的特点" class="headerlink" title="单例模式的特点"></a>单例模式的特点</h3><ul><li>单例模式只能有一个实例</li><li>单例模式必须自己创建自己的唯一实例</li><li>单例模式必须保证给所有其他对象提供这一实例</li></ul><h3 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h3><p>需求：在前端创建工具箱窗口，工具箱要么不出现，出现也只出现一个</p><p>遇到问题：每次点击菜单都会重复创建“工具箱”窗口。</p><p>解决方案一：使用if语句，在每次创建对象的时候首先进行判断是否为null，如果为null再创建对象。</p><p>需求：如果在5个地方需要实例出工具箱窗体</p><p>遇到问题：这个小bug需要改动5个地方，并且代码重复，代码利用率低</p><p>解决方案二：利用单例模式，保证一个类只有一个实例，并提供一个访问它的全局访问点。</p><h3 id="单例模式的实现思路"><a href="#单例模式的实现思路" class="headerlink" title="单例模式的实现思路"></a>单例模式的实现思路</h3><p>单例模式要求类返回对象的一个引用(唯一引用)和一个获得该实例的方法(必须是静态方法)</p><p>单例模式的实现需要两步</p><p>先将类的构造方法定义为私有方法,保证在外部无法通过new关键字调用构造方法创建实例对象</p><p>,只能通过类的静态方法获取实例对象。</p><p>在该类的内部定义一个静态方法,当我们调用这个方法时,先判断该类持有的引用是否为空，</p><p>为空则创建该类的实例，将其的引用赋给该静态方法持有的引用,然后返回。</p><h3 id="单例模式的写法"><a href="#单例模式的写法" class="headerlink" title="单例模式的写法"></a>单例模式的写法</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instence = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ol><li>这种写法比较简单。</li><li>在类装载的时候就实现了实例化，获取对象速度比较快。</li><li>避免了线程安全问题，</li></ol><p><strong>缺点</strong>：</p><ol><li>这样写效率很低。</li><li>在类装载的时候就完成实例化，没有达到懒加载（Lazy Loading）的效果。</li><li>如果从来没有使用过这个实例，会造成内存浪费。</li></ol><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instence;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instence = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><ol><li>这样写相对上一种写法效率有了一些提高。</li><li>这种写法起到了懒加载（Lazy Loading）的效果。</li><li>使用的时候再进行实例化，一定程度避免内存浪费。</li></ol><p><strong>缺点</strong>：这种写法是线程不安全的，在多线程环境下会出现安全问题。</p><p>如果在多线程环境下,一个线程通过了if(instence==null)判断，</p><p>还没有创建实例，但是另一个线程也通过判断进来了，这样就会</p><p>产生多个实例。</p><h4 id="懒汉式变形一（同步代码块-线程安全）"><a href="#懒汉式变形一（同步代码块-线程安全）" class="headerlink" title="懒汉式变形一（同步代码块 线程安全）"></a>懒汉式变形一（同步代码块 线程安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instence;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">        <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instence = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：这种写法加上了同步代码块，保证了线程安全，避免了上面的写法在多线程情况下出现的问题。</p><p>缺点：这样写会造成每次调用静态方法获取实例对象,都需要进入同步代码块，造成效率低下，因为同步会造成效率的浪费，</p><p>我们要清楚同步是以牺牲效率来换取安全的。</p><h4 id="懒汉式变形二（双重检查-优化）"><a href="#懒汉式变形二（双重检查-优化）" class="headerlink" title="懒汉式变形二（双重检查 优化）"></a>懒汉式变形二（双重检查 优化）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instence;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instence = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法是对<strong>变形一</strong>的优化，在外层又加了一层检查，即在同步代码块执行之前先判断实例对象是否存在。</p><p>优点：我们不用再每次调用静态方法获取对象的时候都进行同步，只用进入同步代码块一次就好了。</p><p>大大提高了效率。</p><p>缺点：这样写，会在一定情况下造成线程不安全，由于JVM编译器存在指令重排序，即JVM虚拟机为了提高效率会在其内部对指令的执行顺序在遵循happens-before原则的基础进行调整优化。</p><h5 id="happens-before原则"><a href="#happens-before原则" class="headerlink" title="happens-before原则"></a>happens-before原则</h5><p>JMM具备一些先天的有序性,即不需要通过任何手段就可以保证的有序性，通常称为happens-before原则。&lt;&lt;JSR-133：happens-before规则：</p><ul><li><strong>程序顺序规则：</strong> 一个线程中的每个操作，happens-before于该线程中的任意后续操作</li><li><strong>监视器锁规则：</strong>对一个线程的解锁，happens-before于随后对这个线程的加锁</li><li><strong>volatile变量规则：</strong> 对一个volatile域的写，happens-before于后续对这个volatile域的读</li><li><strong>传递性：</strong>如果A happens-before B ,且 B happens-before C, 那么 A happens-before C</li><li><strong>start()规则：</strong> 如果线程A执行操作ThreadB_start()(启动线程B) , 那么A线程的ThreadB_start()happens-before 于B中的任意操作</li><li><strong>join()原则：</strong> 如果A执行ThreadB.join()并且成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li><li><strong>interrupt()原则：</strong> 对线程interrupt()方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测是否有中断发生</li><li><strong>finalize()原则：</strong>一个对象的初始化完成先行发生于它的finalize()方法的开始</li></ul><p>我们创建实例对象的语句中包含三个指令：</p><p>memory =allocate();    //1：分配对象的内存空间 </p><p>ctorInstance(memory);  //2：初始化对象 </p><p>instance =memory;     //3：设置instance指向刚分配的内存地址 </p><p>但是这样的指令顺序并非一成不变的，经过JVM和CPU的优化，其顺序可能会变成：</p><p>memory =allocate();    //1：分配对象的内存空间 </p><p>instance =memory;     //3：设置instance指向刚分配的内存地址 </p><p>ctorInstance(memory);  //2：初始化对象 </p><p>当一个线程执行完1,3,时，instance对象还未完成初始化，但已经不再指向null。此时如果另一个线程抢占到CPU资源，执行  if（instance == null）的结果会是false，从而返回一个没有初始化完成的instance对象。</p><h4 id="懒汉式变形三（volatile-优化）"><a href="#懒汉式变形三（volatile-优化）" class="headerlink" title="懒汉式变形三（volatile 优化）"></a>懒汉式变形三（volatile 优化）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instence;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instence = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>volatile关键字有两个功能</strong></p><p>a、保证了不同线程对该变量操作的内存可见性;</p><p>b、 禁止指令重排序</p><p>这样就可以保证在多线程情况下变量访问前后因为指令重排序造成的bug</p><p>这样的话，instance对象的引用要么指向null，要么指向一个初始化完毕的Instance，而不会出现某个中间态，保证了安全。</p><h4 id="静态内部类实现单例"><a href="#静态内部类实现单例" class="headerlink" title="静态内部类实现单例"></a>静态内部类实现单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>从外部无法访问静态内部类LazyHolder，只有当调用Singleton.getInstance方法的时候，才能得到单例对象INSTANCE。</li><li>INSTANCE对象初始化的时机并不是在单例类Singleton被加载的时候，而是在调用getInstance方法，使静态内部类LazyHolder被加载。因此这种实现方式是利用classloader的加载机制来实现懒加载，并保证构建单例的线程安全。</li></ol><h4 id="枚举实现单例模式"><a href="#枚举实现单例模式" class="headerlink" title="枚举实现单例模式"></a>枚举实现单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用枚举实现的单例模式，不但可以防止利用反射强行构建单例对象，而且可以在枚举类对象被反序列化的时候，保证反序列的返回结果是同一对象。</p><p>但是也存在着缺点，它没有实现懒加载，其单例对象是在枚举类被加载的时候进行初始化的。</p><p>不过由于枚举是在jdk1.5以后才诞生的，所以我们在实际开发中很少看到。</p><p>最后，至于懒加载（lazy-loading），考虑到一般情况不存在调用单例类又不需要实例化单例的情况，所以即便不能做到很好的懒加载（lazy-loading），也并不是大问题。换言之，除了枚举这种方案，饿汉模式也在单例设计中广泛的被应用。</p><p>所以单元素的枚举类型已经逐渐成为实现Singleton的最佳方法。</p><p>不过具体如何使用，还是要结合实际开发中的具体情况来进行使用。</p><h3 id="单例模式的问题"><a href="#单例模式的问题" class="headerlink" title="单例模式的问题"></a>单例模式的问题</h3><h4 id="反射问题"><a href="#反射问题" class="headerlink" title="反射问题"></a>反射问题</h4><p>j单例模式大都存在一个的问题，就是无法防止使用反射重复创建对象</p><p>利用反射打破单例步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得构造器</span></span><br><span class="line">Constructor con = Singleton.class.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//设置为可访问</span></span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//构造两个不同的对象</span></span><br><span class="line">Singleton singleton1 = (Singleton)con.newInstance();</span><br><span class="line">Singleton singleton2 = (Singleton)con.newInstance();</span><br><span class="line"><span class="comment">//验证是否是不同对象</span></span><br><span class="line">System.out.println(singleton1.equals(singleton2));</span><br></pre></td></tr></table></figure><p> 代码可以简单归纳为三个步骤：</p><p>第一步，获得单例类的构造器。</p><p>第二步，把构造器设置为可访问。</p><p>第三步，使用newInstance方法构造对象。</p><p>最后为了确认这两个对象是否真的是不同的对象，我们使用equals方法进行比较。毫无疑问，比较结果是false。</p><p>但是上面写法中的枚举实现就可以解决这个问题，如果使用枚举实现单例，在利用反射创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得构造器</span></span><br><span class="line">Constructor con = SingletonEnum.class.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//设置为可访问</span></span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//构造两个不同的对象</span></span><br><span class="line">SingletonEnum singleton1 = (SingletonEnum)con.newInstance();</span><br><span class="line">SingletonEnum singleton2 = (SingletonEnum)con.newInstance();</span><br><span class="line"><span class="comment">//验证是否是不同对象</span></span><br><span class="line">System.out.println(singleton1.equals(singleton2));</span><br><span class="line"> </span><br><span class="line">执行获得构造器这一步的时候，抛出了如下异常：</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NoSuchMethodException: com.lj.Singleton.&lt;init&gt;()</span><br><span class="line">at java.lang.Class.getConstructor0(Class.java:<span class="number">3082</span>)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Class.java:<span class="number">2178</span>)</span><br><span class="line">at com.lj.Text01.main(Text01.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>JVM会阻止反射获取枚举的私有构造方法，所有使用枚举可以解决反射重复创建单例对象的问题。</p><h4 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下面我们先简要地回顾下对象的序列化。一般来说，一个类实现了 Serializable接口，我们就可以把它往内存里写再从内存里读出而&quot;组装&quot;成一个跟原来一模一样的对象。不过当序列化遇到单例时，里边就有了个问题：从内存读出而组装的对象破坏了单例的规则。单例是要求一个JVM中只有一个类对象的，而现在通过反序列，一个新的对象克隆了出来。</span><br></pre></td></tr></table></figure><p>这样就会出现两个实例对象，破坏了单例模式的规则。</p><p>我们该怎么解决那</p><p>第一种方法：通过枚举实现单例模式，因为枚举的具有自由序列化的特性，所以枚举类对象被反序列化的时候，保证反序列的返回结果是同一对象。</p><p>第二种方法：在类中加入readUnshared()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instence;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instence = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instence;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123; </span><br><span class="line">   <span class="keyword">return</span> instence; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当JVM从内存中反序列化地”组装”一个新对象时，就会自动调用这个 readResolve方法来返回我们指定好的对象了，单例规则也就得到了保证。 </p><p>readResolve方法的调用流程：ObjectInputStream类的readOrdinaryObject方法，在调用完readSerialData（）方法后，就调用了 ObjectStreamClass类的Object invokeReadResolve(Object obj)方法，通过反射调用了我们自己写的readResolve方法。</p><p>简单来说这就是浅拷贝和深拷贝的区别</p><p>从字面上理解的话就是：<br>浅拷贝—拷贝的级别浅。</p><p>深拷贝—拷贝级别更深。</p><p>具体的就是：</p><p>浅拷贝—能复制变量，如果复制对象的话，当前对象内存在这个对象，则只能复制这个对象的地址。</p><p>深拷贝—能复制变量，也能复制当前对象的内部对象。</p><p>没有readResolve方法时，对象流序列化，便是进行深拷贝，克隆出来一个新实例对象，</p><p>存在readResolve方法时，对象流序列化，便是进行浅拷贝，因为此方法提供了一个对象，那么只能复制</p><p>这个实例对象的地址，指向的还是唯一的实例对象。这样便保证了单例规则。</p><p>上面全文是我对单例模式的一些整理，参考了网上的一些博客，大概有这些</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式可以说是23中设计模式中最容易的实现和理解的设计模式了，不过单例模式写很容易，但是写好就不容易了，因为单例模式中也隐藏了很多的问题，趁着这次机会，结合网上的一些博客，对单例模式做了一个总结。&lt;/p&gt;
&lt;p&gt;这篇文章对单例模式的大部分问题，都进行了总结描述，并提供了解决方法。&lt;/p&gt;
&lt;p&gt;接下来还会对其他设计模式进行总结，不过我对一些问题，总喜欢尽可能的全面了解，所以每一种设计模式，我都会参考阅读很多文献，尽可能的包括大部分内容，所以更新速度可能较慢。&lt;/p&gt;
&lt;p&gt;对于一些问题，有兴趣深入了解的朋友，我也在文章后面附上了我参考的一些链接，希望我们可以共同进步。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql总结(一)</title>
    <link href="http://yoursite.com/2018/09/01/mysql%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/01/mysql总结（一）/</id>
    <published>2018-09-01T10:05:48.000Z</published>
    <updated>2018-09-04T12:44:44.789Z</updated>
    
    <content type="html"><![CDATA[<p>以下是对mysql基本操作命令进行的总结，只是针对单表进行的一些操作，不包括多表操作。</p><a id="more"></a><h4 id="mysql服务命令"><a href="#mysql服务命令" class="headerlink" title="mysql服务命令"></a>mysql服务命令</h4><p>启动mysql服务：net start mysql</p><p>关闭mysql服务：ner stop mysql</p><p><strong>注意：管理员身份才能开关</strong></p><h4 id="mysql连接命令"><a href="#mysql连接命令" class="headerlink" title="mysql连接命令"></a>mysql连接命令</h4><p>mysql连接：mysql  -uroot  -p;</p><p>输入密码：password:xxxxx</p><p>mysql断开连接：quit或exit        (Linxu中也可以ctrl+D)</p><h4 id="mysql基本数据类型"><a href="#mysql基本数据类型" class="headerlink" title="mysql基本数据类型"></a>mysql基本数据类型</h4><p>常用数据类型：</p><ol><li><p>int：整型（4个字节）</p></li><li><p>double：浮点型（8个字节），近似值</p><p>例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99</p></li><li><p>decimal：精确数值数据，最大位数可以是65</p><p>例如decimal(5,2)能够存储具有五位数和两位小数的任何值，因此可以存储范围为-999.99至999.99。</p></li><li><p>char：固定长度字符串类型；    char(10)    ‘aaa       ‘  固定10个字符，不足补空格， 长度0-255</p><p>缺点：浪费空间，优点:查询速度快</p></li><li><p>varchar：可变长度字符串类型； varchar(10)  ‘aaa’     最多存储10个字符</p><p>缺点：查询速度慢，优点：节省空间</p></li><li><p>text：大文本字符串类型；有字符编码，存储比较大的文本数据。</p></li><li><p>blob：Binary  Large Object二进制大对象数据；可以存储图片、音频、视频</p></li><li><p>date：日期类型，格式为：yyyy-MM-dd；</p></li><li><p>time：时间类型，格式为：hh:mm:ss</p></li><li><p>timestamp：时间戳类型 yyyy-MM-dd hh:mm:ss  会自动赋值</p></li><li><p>datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</p></li></ol><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">指定值和范围</th></tr></thead><tbody><tr><td style="text-align:center"><code>char</code></td><td style="text-align:center">String(0~255)</td></tr><tr><td style="text-align:center"><code>varchar</code></td><td style="text-align:center">String(0~255)</td></tr><tr><td style="text-align:center"><code>tinytext</code></td><td style="text-align:center">String(0~255)</td></tr><tr><td style="text-align:center"><code>text</code></td><td style="text-align:center">String(0~65536)</td></tr><tr><td style="text-align:center"><code>blob</code></td><td style="text-align:center">String(0~65536)</td></tr><tr><td style="text-align:center"><code>mediumtext</code></td><td style="text-align:center">String(0~16777215)</td></tr><tr><td style="text-align:center"><code>mediumblob</code></td><td style="text-align:center">String(0~16777215)</td></tr><tr><td style="text-align:center"><code>longblob</code></td><td style="text-align:center">String(0~4294967295)</td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:center">Integer(-214847668~214847667)</td></tr><tr><td style="text-align:center"><code>bigint</code></td><td style="text-align:center">Integer(-9223372036854775808~9223372036854775807)</td></tr><tr><td style="text-align:center"><code>float</code></td><td style="text-align:center">decimal(精确到23位小数)</td></tr><tr><td style="text-align:center"><code>double</code></td><td style="text-align:center">decimal(24~54位小数)</td></tr><tr><td style="text-align:center"><code>decimal</code></td><td style="text-align:center">将<code>double</code>转储为字符串形式</td></tr><tr><td style="text-align:center"><code>date</code></td><td style="text-align:center"><em>YYYY-MM-DD</em></td></tr><tr><td style="text-align:center"><code>datetime</code></td><td style="text-align:center"><em>YYYY-MM-DD HH:MM:SS</em></td></tr><tr><td style="text-align:center"><code>timestamp</code></td><td style="text-align:center"><em>YYYYMMDDHHMMSS</em></td></tr><tr><td style="text-align:center"><code>time</code></td><td style="text-align:center"><em>HH:MM:SS</em></td></tr><tr><td style="text-align:center"><code>enum</code></td><td style="text-align:center">选项值之一</td></tr><tr><td style="text-align:center"><code>set</code></td><td style="text-align:center">选项值子集</td></tr></tbody></table><h4 id="mysql常用约束"><a href="#mysql常用约束" class="headerlink" title="mysql常用约束"></a>mysql常用约束</h4><ul><li>​主键约束：primary key (保证数据唯一性),不能重复，不能为null</li><li>唯一约束：unique [key],不能重复，可以为null</li><li>非空约束：not null</li><li>默认约束：default </li><li>外键约束：foreign key</li><li>自动增长：auto_increment</li></ul><h4 id="mysql数据库操作命令"><a href="#mysql数据库操作命令" class="headerlink" title="mysql数据库操作命令"></a>mysql数据库操作命令</h4><h5 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.show databases; 显示当前mysql中的数据库</span><br><span class="line">2.show <span class="keyword">create</span> databaes 数据库名; 查看数据库定义信息</span><br></pre></td></tr></table></figure><p><strong>系统默认数据库</strong></p><p>information_schema:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。</span><br><span class="line">什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。</span><br></pre></td></tr></table></figure><p>mysql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql：这个是mysql的核心数据库,</span><br><span class="line">主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息，不可以删除。</span><br></pre></td></tr></table></figure><p>performance_schema:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">性能优化的数据库</span><br></pre></td></tr></table></figure><p>test:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个是安装时候创建的一个测试数据库，和它的名字一样，是一个完全的空数据库，没有任何表，可以删除。</span><br></pre></td></tr></table></figure><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.create database 自定义数据库名;（数据库已存在会报错）</span><br><span class="line">2.create database if not exists 数据库名 character <span class="keyword">set</span> gbk;</span><br><span class="line">（先判断数据库存不存在，不存在在创建，并设置数据库编码）</span><br><span class="line">if not exists 不存在则执行后面语句</span><br></pre></td></tr></table></figure><h5 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改数据库编码为utf8</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;（数据库不存在会报错）</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> 数据库名;（先判断数据库存在与否，存在在删除）</span><br><span class="line">if exists 判断数据库是否存在（存在则执行后面语句）</span><br></pre></td></tr></table></figure><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.use  数据库名; 切换数据库</span><br><span class="line">2.select databaes();  查看当前选择的数据库,没有选择数据库，为null;</span><br></pre></td></tr></table></figure><h4 id="mysql数据表操作命令"><a href="#mysql数据表操作命令" class="headerlink" title="mysql数据表操作命令"></a>mysql数据表操作命令</h4><h5 id="查询数据表"><a href="#查询数据表" class="headerlink" title="查询数据表"></a>查询数据表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;显示当前选择数据库的表</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;查看表创建细节</span><br></pre></td></tr></table></figure><h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">语法： <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名(</span><br><span class="line"></span><br><span class="line">                                  字段<span class="number">1</span> 字段类型(长度) 约束,</span><br><span class="line"></span><br><span class="line">                                  字段<span class="number">2</span> 字段类型(长度) 约束,</span><br><span class="line"></span><br><span class="line">                                  ...</span><br><span class="line"></span><br><span class="line">                                  字段n 字段类型(长度) 约束</span><br><span class="line"></span><br><span class="line">                         ) [<span class="keyword">charset</span>=utf8];</span><br><span class="line">例子：<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student</span><br><span class="line">(</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   age <span class="built_in">INT</span>,</span><br><span class="line">   address <span class="built_in">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p><strong>注意：数据库名、表名、字段名可以使用反勾号` 括住，也可以不括。如果SQL关键字一般要括住。</strong></p><h5 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.给当前表增加一列（添加一个字段）</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型(长度) 约束;</span><br><span class="line">2.修改当前表字段类型长度</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 新的字段类型(新的长度);</span><br><span class="line">3.删除当前表的一列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line">4.修改表的字符集为gbk</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="built_in">character</span> <span class="keyword">set</span> gbk;</span><br><span class="line">5.修改列名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 列名 新的列名 字段类型（长度）;</span><br><span class="line">注意:列名即字段名</span><br></pre></td></tr></table></figure><h5 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">if</span> <span class="keyword">exists</span> 表名; 先判断在删除</span><br></pre></td></tr></table></figure><h5 id="其他操作-1"><a href="#其他操作-1" class="headerlink" title="其他操作"></a>其他操作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc 表名; 查看表结构或字段信息</span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 表名 <span class="keyword">to</span> 新表名; 修改表名</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名; 查看表的创建细节</span><br></pre></td></tr></table></figure><h4 id="mysql数据操作命令"><a href="#mysql数据操作命令" class="headerlink" title="mysql数据操作命令"></a>mysql数据操作命令</h4><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><p><strong>​查询语句书写顺序：select  列 from 表 【where- group by- having- order by-limit】</strong></p><p><strong>​查询语句执行顺序：from 表 where -group by -having - select - order by-limit</strong>        </p><h6 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名; 查询所有列，*表示所有列</span><br><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>,列名<span class="number">2</span>,... <span class="keyword">from</span> 表名; 查询指定列</span><br></pre></td></tr></table></figure><h6 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h6><p>条件查询就是在查询时给出WHERE子句，在WHERE子句中可以使用如下运算符及关键字：</p><p><strong>比较运算符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.=、!=、&lt;&gt;、&lt;、&lt;=、&gt;、&gt;=；</span><br><span class="line">2.BETWEEN…AND；</span><br><span class="line">3.IN(set)；</span><br><span class="line">4.IS NULL；</span><br></pre></td></tr></table></figure><p><strong>关系运算符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.AND </span><br><span class="line">2.OR</span><br><span class="line">3.NOT</span><br></pre></td></tr></table></figure><p>注意：AND运算符优先级高于OR,如果需要先执行OR需要添加括号（）改变。</p><p><strong>算数运算符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+  -  *  /  %</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#查询学生表性别为女，而且年龄大于50的人</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> gender=<span class="string">'female'</span> <span class="keyword">AND</span> age&gt;<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">#查询查询学号为S_1001，或者姓名为liSi的记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> <span class="keyword">sid</span>=<span class="string">'S_1001'</span> <span class="keyword">OR</span> sname=<span class="string">'liSi'</span>;</span><br><span class="line"></span><br><span class="line">#查询学号为S1001，S1002，S_1003的记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> <span class="keyword">sid</span> <span class="keyword">IN</span> (<span class="string">'S_1001'</span>,<span class="string">'S_1002'</span>,<span class="string">'S_1003'</span>);</span><br><span class="line"></span><br><span class="line">#查询学号不是S1001，S1002，S_1003的记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span>  <span class="keyword">sid</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'S_1001'</span>,<span class="string">'S_1002'</span>,<span class="string">'S_1003'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">sid</span>  <span class="keyword">IN</span> (<span class="string">'S_1001'</span>,<span class="string">'S_1002'</span>,<span class="string">'S_1003'</span>);</span><br><span class="line"></span><br><span class="line">#查询年龄为null的记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> age <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">#查询年龄在20到40之间的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> age&gt;<span class="number">20</span> <span class="keyword">AND</span> age&lt;<span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">#查询性别非男的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> gender!=<span class="string">'male'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> <span class="keyword">NOT</span> gender=<span class="string">'male'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> gender&lt;&gt;<span class="string">'male'</span>;</span><br><span class="line"></span><br><span class="line">#查询姓名不为null的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> <span class="keyword">NOT</span> sname <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p>模糊查询需要使用关键字like和通配符：</p><p>_任意一个</p><p>%任意0到n个字符</p><p>例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#查询姓名由3个字符构成的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br><span class="line"></span><br><span class="line">#查询姓名由5个字符构成，并且第5个字符为“i”的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">'____i'</span>;</span><br><span class="line"></span><br><span class="line">#查询姓名以“z”开头的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">'z%'</span>;</span><br><span class="line"></span><br><span class="line">#查询姓名中第2个字符为“i”的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">'_i%'</span>;</span><br><span class="line"></span><br><span class="line">#查询姓名中包含“a”字符的学生记录</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> <span class="string">'%a%'</span>;</span><br></pre></td></tr></table></figure><h6 id="字段控制查询"><a href="#字段控制查询" class="headerlink" title="字段控制查询"></a>字段控制查询</h6><ol><li><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用distinct关键字</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 列名<span class="number">1</span>,列名<span class="number">2</span>,... <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>合并数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1)数值类型数据直接进行加法运算</span><br><span class="line"><span class="keyword">select</span> *,数值列名+数值列名 <span class="keyword">from</span> 表名;</span><br><span class="line">(2)字符串类型合并不能直接进行加运算，需要使用concat(列名,'____',列名);</span><br><span class="line"><span class="keyword">select</span> *,<span class="keyword">CONCAT</span>(列名,<span class="string">'-'</span>,列名) <span class="keyword">from</span> 表名;</span><br><span class="line">(3)有的列记录包含很多NULL值，因为任何东西与NULL相加结果还是NULL，所以结算结果可能会出现NULL。</span><br><span class="line">可以使用IFNULL函数将NULL值转换为0</span><br><span class="line"><span class="keyword">select</span> *,列名+<span class="keyword">IFNULL</span>(列名,<span class="number">0</span>) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>给列名添加别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用AS关键字</span><br><span class="line"><span class="keyword">select</span> *,<span class="keyword">CONCAT</span>(列名,<span class="string">'-'</span>,表名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>注意：AS关键字可以省略</p></li></ol><h6 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用ORDER BY关键字，desc表示降序，asc表示升序（默认升序）</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">Order</span> <span class="keyword">by</span> 列名<span class="number">1</span> <span class="keyword">DESC</span>,列名<span class="number">2</span> <span class="keyword">ASC</span>; 先按列名1数据进行降序排序，相同在按列名2数据升序排序</span><br></pre></td></tr></table></figure><h6 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h6><p>聚合函数是用来做纵向运算的函数：</p><ul><li>COUNT()：统计指定列不为NULL的记录行数；</li><li>MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</li><li>MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</li><li>SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</li><li>AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</li></ul><h6 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h6><p>分组查询时需要使用GROUP BY  子句</p><p>HAVING子句可以对分组后的数据进行过滤</p><p>注：凡是和聚合函数同时出现的列名，则一定要写在group by 之后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查询每个部门的部门编号和每个部门的工资和：</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="keyword">SUM</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"></span><br><span class="line">#查询每个部门的部门编号以及每个部门工资大于1500的人数</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal&gt;<span class="number">1500</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"></span><br><span class="line">#查询工资总和大于9000的部门编号以及工资和：</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> <span class="keyword">SUM</span>(sal)&gt;<span class="number">1500</span>;</span><br></pre></td></tr></table></figure><p>注：having与where的区别:</p><ol><li>having是在分组后对数据进行过滤,where是在分组前对数据进行过滤             </li><li>having后面可以使用分组函数(统计函数)</li><li>where后面不可以使用分组函数。<ol start="4"><li>where是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而    having是对分组后数据的约束。</li></ol></li></ol><h6 id="LIMIT限制（分页查询）"><a href="#LIMIT限制（分页查询）" class="headerlink" title="LIMIT限制（分页查询）"></a>LIMIT限制（分页查询）</h6><p>LIMIT用来限定查询结果的起始行，以及总行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询前5行数据</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">#查询5到10行数据</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>注意，起始行从0开始，即第一行开始！</p><p>分页查询：</p><p>如果一页记录为10条，希望查看第3页记录应该怎么查呢？</p><p>l  第一页记录起始行为0，一共查询10行;</p><p>l  第二页记录起始行为10，一共查询10行;</p><p>l  第三页记录起始行为20，一共查询10行;</p><h5 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (列名<span class="number">1</span>,列名<span class="number">2</span>,...) <span class="keyword">values</span>(列值<span class="number">1</span>,列值<span class="number">2</span>,,...);</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>列名与列值的类型、个数、顺序要一一对应。</li><li>可以把列名当做java中的形参，把列值当做实参。</li><li>参数不要超出列定义的长度。</li><li>如果插入空值，请使用null</li><li>插入的日期和字符一样，都使用单引号括起来。</li></ul><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span>=列值<span class="number">1</span>,列名<span class="number">2</span>=列值<span class="number">2</span>,...where 列名=列值;</span><br><span class="line">where后面是修改条件（可选操作）;</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.delete from 表名; 删除表中所有数据</span><br><span class="line">2.delete from 表名 where 列名=列值; 删除满足where后面条件的数据</span><br><span class="line">3.truncate table emp;使用<span class="keyword">truncate</span>删除表中记录。(先把表删除，然后再创建空表)</span><br></pre></td></tr></table></figure><ul><li>DELETE 删除表中的数据，表结构还在;删除后的数据使用日志可以找回。</li><li>TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。</li><li>TRUNCATE 删除的数据不能找回。执行速度比DELETE快。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是对mysql基本操作命令进行的总结，只是针对单表进行的一些操作，不包括多表操作。&lt;/p&gt;
    
    </summary>
    
      <category term="命令" scheme="http://yoursite.com/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis简介</title>
    <link href="http://yoursite.com/2018/08/31/Mybatis%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/08/31/Mybatis简介/</id>
    <published>2018-08-31T11:40:06.000Z</published>
    <updated>2018-08-31T12:41:23.406Z</updated>
    
    <content type="html"><![CDATA[<p>​    MyBatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架，MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</p><p>​    MyBatis可以对配置和原生Map使用简单的XML或注解，将接口和Java的POJOs(Plain Old Java Objects,普通的Java对象)映射成数据库中的记录。</p><a id="more"></a><h2 id="框架概念"><a href="#框架概念" class="headerlink" title="框架概念"></a>框架概念</h2><p>百度百科：框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。<br>对于程序员来说，框架是一套资源，一套解决某一类问题所使用的资源。这套资源中包含：Jar包、文档、源码、示例等内容，或其中部分内容。</p><p>##MyBatis框架介绍</p><p>MyBatis框架的前身是Apache的一个项目，名称为iBaits。2010年，该项目迁移到了Google，更名为MyBatis。2013年，项目又交由GitHub托管。</p><p>我们要下载这个框架从GitHub官网下载    <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p><p>mybatis-3.4.2.jar  MyBatis的核心Jar包<br>lib                MyBatis核心Jar包所依赖的Jar包<br>mybatis-3.4.2.pdf  MyBatis官方帮助文档</p><h2 id="MyBatis框架的作用"><a href="#MyBatis框架的作用" class="headerlink" title="MyBatis框架的作用"></a>MyBatis框架的作用</h2><p> MyBatis在三层架构中处于Dao层，用于访问数据库。其作用类似于JDBC。</p><h2 id="MyBatis系统架构图"><a href="#MyBatis系统架构图" class="headerlink" title="MyBatis系统架构图"></a>MyBatis系统架构图</h2><p><img src="/img/mybatis结构图.png" alt="mybatis结构图"></p><h2 id="Mybatis框架运行原理"><a href="#Mybatis框架运行原理" class="headerlink" title="Mybatis框架运行原理"></a>Mybatis框架运行原理</h2><pre><code>API：Application Programming Interface，应用程序接口ORM：Object Ralationship Mapping，对象关系映射MyBatis是一种ORM框架，是半自动ORM。MyBatis底层封装了JDBC，Hibernate也是一种ORM框架，是全自动ORM。</code></pre><h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><p>功能：将一个学生信息写入DB</p><h3 id="导入Jar包"><a href="#导入Jar包" class="headerlink" title="导入Jar包"></a>导入Jar包</h3><p>Mybatis的jar包（mybatis核心jai包和mybatis所依赖的jar包lib文件夹下的）</p><p>mysql驱动的jar包</p><p><img src="/img/mybatis所需jar包.png" alt="mybatis所需jar包"></p><h3 id="定义一个Stduent类"><a href="#定义一个Stduent类" class="headerlink" title="定义一个Stduent类"></a>定义一个Stduent类</h3><p>id，name，age，score    </p><pre><code>* 主键id要定义为包装类型，不要定义为基本数据类型，例如，不要定义为int，而要定义为Integer* 若显式地给出了带参构造器，则要显式地给出无参构造器。    -- 若当前实体类有可能作父类，那么要创建子类对象时，JVM会调用其父类的无参构造器    -- 若使用了Spring框架，那么要求由Spring容器所管理的类，必须要有无参构造器</code></pre><h3 id="创建DB表"><a href="#创建DB表" class="headerlink" title="创建DB表"></a>创建DB表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表名：student</span><br><span class="line">字段：id,name,age,score</span><br></pre></td></tr></table></figure><h3 id="定义Dao接口IStudentDao"><a href="#定义Dao接口IStudentDao" class="headerlink" title="定义Dao接口IStudentDao"></a>定义Dao接口IStudentDao</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IStudentDao &#123;</span><br><span class="line">void insertStudent(Student student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义映射文件"><a href="#定义映射文件" class="headerlink" title="定义映射文件"></a>定义映射文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* 是一个XML文件，文件名随意，我们这里叫mapper.xml。</span><br><span class="line">* 该文件定义到Dao接口所在包。</span><br><span class="line">* 约束文件为mybatis-3.4.2.jar ! /org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper&gt;</span><br><span class="line">&lt;insert id=&quot;insertStu&quot; parameterType=&quot;com.abc.beans.Student&quot;&gt;</span><br><span class="line">insert into student(name,age,score) values(#&#123;name&#125;, #&#123;age&#125;, #&#123;score&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="定义主配置文件"><a href="#定义主配置文件" class="headerlink" title="定义主配置文件"></a>定义主配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* 是一个XML文件，文件名随意，我们这里叫mybatis.xml</span><br><span class="line">* 定义在src根下</span><br><span class="line">* 约束文件为mybatis-3.4.2.jar ! /org/apache/ibatis/builder/xml/mybatis-3-config.dtd</span><br><span class="line">标签介绍</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">该标签用于指定事务管理器。type的取值有两个：</span><br><span class="line">JDBC：使用JDBC事务管理器</span><br><span class="line">MANAGED：使用第三方事务管理器，例如使用Spring的事务管理器</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">该标签用于指定数据源类型。type的取值有三个：</span><br><span class="line">POOLED：使用连接池技术（默认使用的是Mybatis内置连接池）</span><br><span class="line">UNPOOLED：不使用连接池技术</span><br><span class="line">JNDI：Java Naming-Directory Interface，Java命名与目录接口，这是一个容器。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    MyBatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架，MyBatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。&lt;/p&gt;
&lt;p&gt;​    MyBatis可以对配置和原生Map使用简单的XML或注解，将接口和Java的POJOs(Plain Old Java Objects,普通的Java对象)映射成数据库中的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="SSM框架" scheme="http://yoursite.com/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybits" scheme="http://yoursite.com/tags/Mybits/"/>
    
  </entry>
  
  <entry>
    <title>心之所向，素履以往</title>
    <link href="http://yoursite.com/2018/08/30/Thorn/"/>
    <id>http://yoursite.com/2018/08/30/Thorn/</id>
    <published>2018-08-30T04:05:56.829Z</published>
    <updated>2018-08-31T05:31:26.682Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/Thorn.jpg"></p><p>人这一生，最幸运的事情便是努力就能得到回报，若是遇到一二，定要尽力抓住。</p><a id="more"></a><p>1.与其驻足，叹咫尺即天涯，不如上路，笑看天涯亦咫尺。</p><p>2.生活多么无趣，但一则则无趣的生活编织在一起，才构成了生命的繁华。</p><p>3.有很多人，你原以为可以忘记。其实没有。他们一直在你心底的一个角落。直到你的生命尽头。在尽头你会怀念每一个角落里的黑暗之中的光，因为他们组成你的记忆与感情。但是你已经不能拥抱他们。只能在最后明白，路途是一个念念不忘的失去的过程。</p><p>4.我们在电影里看着别人替我们过着梦里的人生，看着他们替我们爱，替我们死，动容之时流下眼泪——擦干之后，那不过是灰飞烟灭的幻象，生活仍然一无所有。</p><p>5.我自倾杯，君且随意 ：最深情的话莫过于此了。</p><p>6.但愿你的旅途漫长，但愿你拥抱的人正泪流不止。但愿你付出的爱，有着某种恰到好处的形状，恰能完好地镶嵌在她的灵魂空缺处，毫厘不差。但愿你心底关怀，杯满四溢，又正在被另一个孤独的灵魂渴望着。</p><p>7.但愿你记得，在你痛哭失声的时刻，曾有人以肩窝盛满你的泪。</p><p>8.路是时光的血脉，通向生命不可知的隘口。</p><p>9.我想去相信一个人，非常想。可是每个人在这个世界上忙着生，忙着死，所有人都是如此窘迫的姿态。令我不忍心再向别人索求关怀。如果我们想不对人或事失望，惟一的方法就是不要对它给予任何希望。这不是绝望，这是生存下去的惟一途径，亦是获取幸福感的前提。</p><p>10.我想，沉默是成长的标志，而成熟的标志，就是如何去沉默。我不能说我们生如夏花，活得完美而睿智，死如秋叶亦离我们非常遥远，当下最真实的，不过是一种宽宏和原谅，对自身、他人，以及这个失望和希望并存的世界。</p><p>11.在这个吵得人分不清东南西北得世界里，我们手里所持有的干干净净的初衷，不多了。握好了，别丢了。明天还要赶很远的路。</p><p>12.隐忍平凡的外壳下，要像果实般有着汁甜水蜜的肉瓤，以及一颗坚硬闪亮的内核。</p><p>13.心之所向，素履以往。生如逆旅， 一苇以航。</p><p>14.做学生的时候，身是不自由的，但心却很自由，有多远梦多远。而今，身是自由的，但心已经无法自由。有多少梦，就有多远。</p><p>15.一段感情若势如破竹，最后也往往兵败如山倒。但也曾算是，像把每一天当成是最后一天来珍惜生命那般，把眼前人当成是最后一个人来珍惜感情。奈何世事无常，人无常，爱无常。花辞树，以叶为美。叶落尽，以枝为姿。枝若朽，以根为雕。感情若如四季，我愿如良木。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/Thorn.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;人这一生，最幸运的事情便是努力就能得到回报，若是遇到一二，定要尽力抓住。&lt;/p&gt;
    
    </summary>
    
      <category term="美文" scheme="http://yoursite.com/categories/%E7%BE%8E%E6%96%87/"/>
    
    
      <category term="文章" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
